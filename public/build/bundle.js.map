{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-spa-router/Router.svelte","../../node_modules/regexparam/dist/index.mjs","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/regex.js","../../node_modules/uuid/dist/esm-browser/validate.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../src/Stores/settingsStore.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/Components/Misc/Link.svelte","../../src/Components/Misc/Nav.svelte","../../src/Components/Misc/TitleBar.svelte","../../src/Pages/_page.svelte","../../src/Components/Misc/Shell.svelte","../../src/Components/Diagnostics/Netstat/Netstat.svelte","../../src/Logex/Logex.js","../../src/Components/Diagnostics/NetworkSpeed/NetworkSpeed.svelte","../../src/Components/Diagnostics/PasswordStrength/PasswordStrength.svelte","../../src/Components/Diagnostics/SslChecker/SslChecker.svelte","../../src/Components/Network/Dns/Dns.svelte","../../src/Components/Network/IPTools/IPTools.svelte","../../src/Components/Network/NetworkInterfaces/NetworkInterfaces.svelte","../../src/Components/Network/Ping/Ping.svelte","../../src/Components/Network/Ports/Ports.svelte","../../src/Components/System/Cpu/Cpu.svelte","../../src/Components/System/Disk/Disk.svelte","../../src/Components/System/Graphics/Graphics.svelte","../../src/Components/System/OS/OSinfo.svelte","../../src/Components/System/Ram/Ram.svelte","../../src/Components/System/Usage/Usage.svelte","../../src/Components/Wifi/Info/Info.svelte","../../src/Components/Diagnostics/ArpLD/LocalDevices.svelte","../../src/Pages/_main.svelte","../../src/Components/Diagnostics/Netmask/Netmask.svelte","../../src/Components/Diagnostics/NetworkX/NetworkX.svelte","../../src/Components/System/Pstop/Pstop.svelte","../../src/Pages/_api.svelte","../../src/Pages/_settings.svelte","../../src/App.svelte","../../src/svelte.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if (typeof $$scope.dirty === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value' || descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.setAttribute('aria-hidden', 'true');\n    object.type = 'text/html';\n    object.tabIndex = -1;\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined' ? window : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.19.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script context=\"module\">\nimport {readable, writable, derived} from 'svelte/store'\nimport {tick} from 'svelte'\nimport {wrap as _wrap} from './wrap'\n\n/**\n * Wraps a component to add route pre-conditions.\n * @deprecated Use `wrap` from `svelte-spa-router/wrap` instead. This function will be removed in a later version.\n * \n * @param {SvelteComponent} component - Svelte component for the route\n * @param {object} [userData] - Optional object that will be passed to each `conditionsFailed` event\n * @param {...function(RouteDetail): boolean} conditions - Route pre-conditions to add, which will be executed in order\n * @returns {WrappedComponent} Wrapped component\n */\nexport function wrap(component, userData, ...conditions) {\n    // Use the new wrap method and show a deprecation warning\n    // eslint-disable-next-line no-console\n    console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading')\n    return _wrap({\n        component,\n        userData,\n        conditions\n    })\n}\n\n/**\n * @typedef {Object} Location\n * @property {string} location - Location (page/view), for example `/book`\n * @property {string} [querystring] - Querystring from the hash, as a string not parsed\n */\n/**\n * Returns the current location from the hash.\n *\n * @returns {Location} Location object\n * @private\n */\nfunction getLocation() {\n    const hashPosition = window.location.href.indexOf('#/')\n    let location = (hashPosition > -1) ? window.location.href.substr(hashPosition + 1) : '/'\n\n    // Check if there's a querystring\n    const qsPosition = location.indexOf('?')\n    let querystring = ''\n    if (qsPosition > -1) {\n        querystring = location.substr(qsPosition + 1)\n        location = location.substr(0, qsPosition)\n    }\n\n    return {location, querystring}\n}\n\n/**\n * Readable store that returns the current full location (incl. querystring)\n */\nexport const loc = readable(\n    null,\n    // eslint-disable-next-line prefer-arrow-callback\n    function start(set) {\n        set(getLocation())\n\n        const update = () => {\n            set(getLocation())\n        }\n        window.addEventListener('hashchange', update, false)\n\n        return function stop() {\n            window.removeEventListener('hashchange', update, false)\n        }\n    }\n)\n\n/**\n * Readable store that returns the current location\n */\nexport const location = derived(\n    loc,\n    ($loc) => $loc.location\n)\n\n/**\n * Readable store that returns the current querystring\n */\nexport const querystring = derived(\n    loc,\n    ($loc) => $loc.querystring\n)\n\n/**\n * Store that returns the currently-matched params.\n * Despite this being writable, consumers should not change the value of the store.\n * It is exported as a readable store only (in the typings file)\n */\nexport const params = writable(undefined)\n\n/**\n * Navigates to a new page programmatically.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function push(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    // Note: this will include scroll state in history even when restoreScrollState is false\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined, undefined)      \n    window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location\n}\n\n/**\n * Navigates back in history (equivalent to pressing the browser's back button).\n * \n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function pop() {\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    window.history.back()\n}\n\n/**\n * Replaces the current page but without modifying the history stack.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function replace(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    const dest = (location.charAt(0) == '#' ? '' : '#') + location\n    try {\n        const newState = {\n            ...history.state\n        }\n        delete newState['__svelte_spa_router_scrollX']\n        delete newState['__svelte_spa_router_scrollY']\n        window.history.replaceState(newState, undefined, dest)\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Caught exception while replacing the current page. If you\\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.')\n    }\n\n    // The method above doesn't trigger the hashchange event, so let's do that manually\n    window.dispatchEvent(new Event('hashchange'))\n}\n\n/**\n * Dictionary with options for the link action.\n * @typedef {Object} LinkActionOpts\n * @property {string} href - A string to use in place of the link's href attribute. Using this allows for updating link's targets reactively.\n * @property {boolean} disabled - If true, link is disabled\n */\n\n/**\n * Svelte Action that enables a link element (`<a>`) to use our history management.\n *\n * For example:\n *\n * ````html\n * <a href=\"/books\" use:link>View books</a>\n * ````\n *\n * @param {HTMLElement} node - The target node (automatically set by Svelte). Must be an anchor tag (`<a>`) with a href attribute starting in `/`\n * @param {string|LinkActionOpts} opts - Options object. For legacy reasons, we support a string too which will be the value for opts.href\n */\nexport function link(node, opts) {\n    opts = linkOpts(opts)\n\n    // Only apply to <a> tags\n    if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {\n        throw Error('Action \"link\" can only be used with <a> tags')\n    }\n\n    updateLink(node, opts)\n\n    return {\n        update(updated) {\n            updated = linkOpts(updated)\n            updateLink(node, updated)\n        }\n    }\n}\n\n// Internal function used by the link function\nfunction updateLink(node, opts) {\n    let href = opts.href || node.getAttribute('href')\n\n    // Destination must start with '/' or '#/'\n    if (href && href.charAt(0) == '/') {\n        // Add # to the href attribute\n        href = '#' + href\n    }\n    else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {\n        throw Error('Invalid value for \"href\" attribute: ' + href)\n    }\n\n    node.setAttribute('href', href)\n    node.addEventListener('click', (event) => {\n        // Prevent default anchor onclick behaviour\n        event.preventDefault()\n        if (!opts.disabled) {\n            scrollstateHistoryHandler(event.currentTarget.getAttribute('href'))\n        }\n    })\n}\n\n// Internal function that ensures the argument of the link action is always an object\nfunction linkOpts(val) {\n    if (val && typeof val == 'string') {\n        return {\n            href: val\n        }\n    }\n    else {\n        return val || {}\n    }\n}\n\n/**\n * The handler attached to an anchor tag responsible for updating the\n * current history state with the current scroll state\n *\n * @param {string} href - Destination\n */\nfunction scrollstateHistoryHandler(href) {\n    // Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined, undefined)\n    // This will force an update as desired, but this time our scroll state will be attached\n    window.location.hash = href\n}\n</script>\n\n{#if componentParams}\n    <svelte:component\n    this=\"{component}\"\n    params=\"{componentParams}\"\n    on:routeEvent\n    {...props}\n    />\n{:else}\n    <svelte:component\n    this=\"{component}\"\n    on:routeEvent\n    {...props}\n    />\n{/if}\n\n<script>\nimport {onDestroy, createEventDispatcher, afterUpdate} from 'svelte'\nimport {parse} from 'regexparam'\n\n/**\n * Dictionary of all routes, in the format `'/path': component`.\n *\n * For example:\n * ````js\n * import HomeRoute from './routes/HomeRoute.svelte'\n * import BooksRoute from './routes/BooksRoute.svelte'\n * import NotFoundRoute from './routes/NotFoundRoute.svelte'\n * routes = {\n *     '/': HomeRoute,\n *     '/books': BooksRoute,\n *     '*': NotFoundRoute\n * }\n * ````\n */\nexport let routes = {}\n\n/**\n * Optional prefix for the routes in this router. This is useful for example in the case of nested routers.\n */\nexport let prefix = ''\n\n/**\n * If set to true, the router will restore scroll positions on back navigation\n * and scroll to top on forward navigation.\n */\nexport let restoreScrollState = false\n\n/**\n * Container for a route: path, component\n */\nclass RouteItem {\n    /**\n     * Initializes the object and creates a regular expression from the path, using regexparam.\n     *\n     * @param {string} path - Path to the route (must start with '/' or '*')\n     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped\n     */\n    constructor(path, component) {\n        if (!component || (typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true))) {\n            throw Error('Invalid component object')\n        }\n\n        // Path must be a regular or expression, or a string starting with '/' or '*'\n        if (!path || \n            (typeof path == 'string' && (path.length < 1 || (path.charAt(0) != '/' && path.charAt(0) != '*'))) ||\n            (typeof path == 'object' && !(path instanceof RegExp))\n        ) {\n            throw Error('Invalid value for \"path\" argument - strings must start with / or *')\n        }\n\n        const {pattern, keys} = parse(path)\n\n        this.path = path\n\n        // Check if the component is wrapped and we have conditions\n        if (typeof component == 'object' && component._sveltesparouter === true) {\n            this.component = component.component\n            this.conditions = component.conditions || []\n            this.userData = component.userData\n            this.props = component.props || {}\n        }\n        else {\n            // Convert the component to a function that returns a Promise, to normalize it\n            this.component = () => Promise.resolve(component)\n            this.conditions = []\n            this.props = {}\n        }\n\n        this._pattern = pattern\n        this._keys = keys\n    }\n\n    /**\n     * Checks if `path` matches the current route.\n     * If there's a match, will return the list of parameters from the URL (if any).\n     * In case of no match, the method will return `null`.\n     *\n     * @param {string} path - Path to test\n     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.\n     */\n    match(path) {\n        // If there's a prefix, check if it matches the start of the path.\n        // If not, bail early, else remove it before we run the matching.\n        if (prefix) {\n            if (typeof prefix == 'string') {\n                if (path.startsWith(prefix)) {\n                    path = path.substr(prefix.length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n            else if (prefix instanceof RegExp) {\n                const match = path.match(prefix)\n                if (match && match[0]) {\n                    path = path.substr(match[0].length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n        }\n\n        // Check if the pattern matches\n        const matches = this._pattern.exec(path)\n        if (matches === null) {\n            return null\n        }\n\n        // If the input was a regular expression, this._keys would be false, so return matches as is\n        if (this._keys === false) {\n            return matches\n        }\n\n        const out = {}\n        let i = 0\n        while (i < this._keys.length) {\n            // In the match parameters, URL-decode all values\n            try {\n                out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null\n            }\n            catch (e) {\n                out[this._keys[i]] = null\n            }\n            i++\n        }\n        return out\n    }\n\n    /**\n     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events\n     * @typedef {Object} RouteDetail\n     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)\n     * @property {string} location - Location path\n     * @property {string} querystring - Querystring from the hash\n     * @property {object} [userData] - Custom data passed by the user\n     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)\n     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)\n     */\n\n    /**\n     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.\n     * \n     * @param {RouteDetail} detail - Route detail\n     * @returns {boolean} Returns true if all the conditions succeeded\n     */\n    async checkConditions(detail) {\n        for (let i = 0; i < this.conditions.length; i++) {\n            if (!(await this.conditions[i](detail))) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\n// Set up all routes\nconst routesList = []\nif (routes instanceof Map) {\n    // If it's a map, iterate on it right away\n    routes.forEach((route, path) => {\n        routesList.push(new RouteItem(path, route))\n    })\n}\nelse {\n    // We have an object, so iterate on its own properties\n    Object.keys(routes).forEach((path) => {\n        routesList.push(new RouteItem(path, routes[path]))\n    })\n}\n\n// Props for the component to render\nlet component = null\nlet componentParams = null\nlet props = {}\n\n// Event dispatcher from Svelte\nconst dispatch = createEventDispatcher()\n\n// Just like dispatch, but executes on the next iteration of the event loop\nasync function dispatchNextTick(name, detail) {\n    // Execute this code when the current call stack is complete\n    await tick()\n    dispatch(name, detail)\n}\n\n// If this is set, then that means we have popped into this var the state of our last scroll position\nlet previousScrollState = null\n\n// Update history.scrollRestoration depending on restoreScrollState\n$: history.scrollRestoration = restoreScrollState ? 'manual' : 'auto'\nlet popStateChanged = null\nif (restoreScrollState) {\n    popStateChanged = (event) => {\n        // If this event was from our history.replaceState, event.state will contain\n        // our scroll history. Otherwise, event.state will be null (like on forward\n        // navigation)\n        if (event.state && event.state.__svelte_spa_router_scrollY) {\n            previousScrollState = event.state\n        }\n        else {\n            previousScrollState = null\n        }\n    }\n    // This is removed in the destroy() invocation below\n    window.addEventListener('popstate', popStateChanged)\n\n    afterUpdate(() => {\n        // If this exists, then this is a back navigation: restore the scroll position\n        if (previousScrollState) {\n            window.scrollTo(previousScrollState.__svelte_spa_router_scrollX, previousScrollState.__svelte_spa_router_scrollY)\n        }\n        else {\n            // Otherwise this is a forward navigation: scroll to top\n            window.scrollTo(0, 0)\n        }\n    })\n}\n\n// Always have the latest value of loc\nlet lastLoc = null\n\n// Current object of the component loaded\nlet componentObj = null\n\n// Handle hash change events\n// Listen to changes in the $loc store and update the page\n// Do not use the $: syntax because it gets triggered by too many things\nconst unsubscribeLoc = loc.subscribe(async (newLoc) => {\n    lastLoc = newLoc\n\n    // Find a route matching the location\n    let i = 0\n    while (i < routesList.length) {\n        const match = routesList[i].match(newLoc.location)\n        if (!match) {\n            i++\n            continue\n        }\n\n        const detail = {\n            route: routesList[i].path,\n            location: newLoc.location,\n            querystring: newLoc.querystring,\n            userData: routesList[i].userData,\n            params: (match && typeof match == 'object' && Object.keys(match).length) ? match : null\n        }\n\n        // Check if the route can be loaded - if all conditions succeed\n        if (!(await routesList[i].checkConditions(detail))) {\n            // Don't display anything\n            component = null\n            componentObj = null\n            // Trigger an event to notify the user, then exit\n            dispatchNextTick('conditionsFailed', detail)\n            return\n        }\n\n        // Trigger an event to alert that we're loading the route\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoading', Object.assign({}, detail))\n\n        // If there's a component to show while we're loading the route, display it\n        const obj = routesList[i].component\n        // Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted\n        if (componentObj != obj) {\n            if (obj.loading) {\n                component = obj.loading\n                componentObj = obj\n                componentParams = obj.loadingParams\n                props = {}\n\n                // Trigger the routeLoaded event for the loading component\n                // Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)\n                dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n                    component: component,\n                    name: component.name,\n                    params: componentParams\n                }))\n            }\n            else {\n                component = null\n                componentObj = null\n            }\n\n            // Invoke the Promise\n            const loaded = await obj()\n\n            // Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile\n            if (newLoc != lastLoc) {\n                // Don't update the component, just exit\n                return\n            }\n\n            // If there is a \"default\" property, which is used by async routes, then pick that\n            component = (loaded && loaded.default) || loaded\n            componentObj = obj\n        }\n\n        // Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`\n        // Of course, this assumes that developers always add a \"params\" prop when they are expecting parameters\n        if (match && typeof match == 'object' && Object.keys(match).length) {\n            componentParams = match\n        }\n        else {\n            componentParams = null\n        }\n\n        // Set static props, if any\n        props = routesList[i].props\n\n        // Dispatch the routeLoaded event then exit\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n            component: component,\n            name: component.name,\n            params: componentParams\n        })).then(() => {\n            params.set(componentParams)\n        })\n        return\n    }\n\n    // If we're still here, there was no match, so show the empty component\n    component = null\n    componentObj = null\n    params.set(undefined)\n})\n\nonDestroy(() => {\n    unsubscribeLoc()\n    popStateChanged && window.removeEventListener('popstate', popStateChanged)\n})\n</script>\n","export function parse(str, loose) {\n\tif (str instanceof RegExp) return { keys:false, pattern:str };\n\tvar c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');\n\tarr[0] || arr.shift();\n\n\twhile (tmp = arr.shift()) {\n\t\tc = tmp[0];\n\t\tif (c === '*') {\n\t\t\tkeys.push('wild');\n\t\t\tpattern += '/(.*)';\n\t\t} else if (c === ':') {\n\t\t\to = tmp.indexOf('?', 1);\n\t\t\text = tmp.indexOf('.', 1);\n\t\t\tkeys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );\n\t\t\tpattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';\n\t\t\tif (!!~ext) pattern += (!!~o ? '?' : '') + '\\\\' + tmp.substring(ext);\n\t\t} else {\n\t\t\tpattern += '/' + tmp;\n\t\t}\n\t}\n\n\treturn {\n\t\tkeys: keys,\n\t\tpattern: new RegExp('^' + pattern + (loose ? '(?=$|\\/)' : '\\/?$'), 'i')\n\t};\n}\n\nvar RGX = /*#__PURE__*/ /(\\/|^)([:*][^/]*?)(\\?)?(?=[/.]|$)/g;\n\n// error if key missing?\nexport function inject(route, values) {\n\treturn route.replace(RGX, (x, lead, key, optional) => {\n\t\tx = values[key=='*' ? 'wild' : key.substring(1)];\n\t\treturn x ? '/'+x : (optional || key=='*') ? '' : '/' + key;\n\t});\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","//Svelte\r\nimport { writable } from \"svelte/store\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n//Export\r\nexport const settings = writable({\r\n    username: localStorage.username ? localStorage.username : 'Neuron',\r\n    id: localStorage.id ? localStorage.id : uuidv4(),\r\n    bgColor1 : localStorage.bgColor1 ? localStorage.bgColor1 : '#1F2937',\r\n    bgColor2 : localStorage.bgColor2 ? localStorage.bgColor2 : '#111827',\r\n    bgColor3 : localStorage.bgColor3 ? localStorage.bgColor3 : '#374151',\r\n    bgColor4 : localStorage.bgColor4 ? localStorage.bgColor4 : '#a855f7',\r\n    fontColor1 : localStorage.fontColor1 ? localStorage.fontColor1 : '#ffffff',\r\n    fontColor2 : localStorage.fontColor2 ? localStorage.fontColor2 : '#f0f0f0',\r\n    fontColor3 : localStorage.fontColor2 ? localStorage.fontColor2 : '#f0f0f0',\r\n    fontColor4 : localStorage.fontColor2 ? localStorage.fontColor2 : '#f0f0f0',\r\n    shellColor : localStorage.linkColor ? localStorage.shellColor : '#374151',\r\n    linkColor : localStorage.linkColor ? localStorage.linkColor : '#374151',\r\n    miscColor : localStorage.miscColor ? localStorage.miscColor : '#8B5CF6',\r\n    font : localStorage.font ? localStorage.font : ''\r\n});\r\n","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","<script>\r\n    //Svelte\r\n    import { settings } from '../../Stores/settingsStore';\r\n\r\n    //Exports\r\n    export let link = '#/';\r\n    export let icon = 'fa-home';\r\n    export let name = 'Home';\r\n</script>\r\n\r\n<style>\r\na:hover {\r\n  color: #8B5CF6;\r\n  /* font-weight:bold; */\r\n}\r\n\r\n</style>\r\n\r\n<div\r\n    class=\"text-lg my-8\"\r\n    style=\"color: {$settings.fontColor1}\"\r\n>\r\n    <a href={link}>\r\n        <div\r\n          class=\"rounded p-2 flex flex-row items-center\"\r\n          style=\"background:{$settings.bgColor3}\"\r\n        >\r\n            <i class=\"fa {icon} text-center w-full md:w-8\" />\r\n            <span class=\"hidden md:block pl-2 font-semibold uppercase\">\r\n                {name}\r\n            </span>\r\n        </div>\r\n    </a>\r\n</div>\r\n","<script>\r\n    import Link from './Link.svelte';\r\n    import { settings } from '../../Stores/settingsStore';\r\n</script>\r\n\r\n<div\r\n    class=\"w-auto px-4 sticky top-0\"\r\n    id=\"nav\"\r\n    style=\"background-color: {$settings.bgColor1};\"\r\n>\r\n    <h2\r\n        class=\"text-center text-2xl mt-8 font-medium\"\r\n        style=\"color: {$settings.fontColor1};\"\r\n    >\r\n    <!-- <i class=\"fa fa-tachometer fa-2x\" aria-hidden=\"true\"></i> -->\r\n    <!-- <i class=\"fa fa-th fa-2x\" aria-hidden=\"true\"></i> -->\r\n    <i class=\"fa fa-database fa-2x\" aria-hidden=\"true\"></i>\r\n    <p class=\"text-center text-xl mt-2 font-semibold\">{$settings.username}</p>\r\n\r\n        <!-- {$settings.username} -->\r\n    </h2>\r\n    <div class=\"mt-8\"></div>\r\n    <Link link={'#/'} icon={'fa-home'} name={'Home'} />\r\n    <Link link={'#/network'} icon={'fa-plug'} name={'Network'} />\r\n    <Link link={'#/diagnostics'} icon={'fa-cubes'} name={'Diagnostics'} />\r\n    <!-- <Link link={'#/wifi'} icon={'fa-wifi'} name={'WI-FI'} /> -->\r\n    <Link link={'#/system'} icon={'fa-microchip'} name={'System'} />\r\n    <Link link={'#/api'} icon={'fa-terminal'} name={'API'} />\r\n    <Link link={'#/settings'} icon={'fa-cog'} name={'Settings'} />\r\n</div>\r\n","<script>\r\n    //Svelte\r\n    import { settings } from '../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { remote } = require(\"electron\");\r\n    const window = remote.getCurrentWindow();\r\n\r\n    //Exports\r\n    export let currPage=\"Home\";\r\n</script>\r\n\r\n<div\r\n    class=\"flex flex-row justify-between my-2 drag w-full sticky top-0\"\r\n    style=\"color: {$settings.fontColor2}; background-color: {$settings.bgColor2}\"\r\n>\r\n    <!-- <div class=\"drag\" />\r\n    <div class=\"drag\"> -->\r\n        <h1 class=\"mt-1 text-xl ml-10 font-semibold uppercase\">\r\n        Neuron / <span style=\"background-color:{$settings.bgColor2}\" class=\"pr-2 pb-1 rounded-md\">{currPage}</span>\r\n        </h1>\r\n            <!-- NEURON -->\r\n    <!-- </div> -->\r\n    <div class=\"flex flex-row justify-center items-center text-md no-drag\">\r\n        <button on:click={() => window.minimize()} class=\"fa fa-window-minimize \" />\r\n        <button on:click={() => window.maximize()} class=\"fa fa-window-maximize mx-6\" />\r\n        <button on:click={() => window.close()} class=\"fa fa-times mr-4\" />\r\n    </div>\r\n</div>\r\n<!-- <hr class=\"mt-2 w-full\"> -->\r\n\r\n\r\n<style>\r\n    .drag {\r\n        -webkit-user-select: none;\r\n        -webkit-app-region: drag;\r\n    }\r\n    .no-drag {\r\n        -webkit-user-select: none;\r\n        -webkit-app-region: none;\r\n    }\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import { onMount } from 'svelte';\r\n    import Nav from '../Components/Misc/Nav.svelte';\r\n    import TitleBar from '../Components/Misc/TitleBar.svelte';\r\n    import { settings } from '../Stores/settingsStore';\r\n\r\n    export let _currPage=\"Home\";\r\n\r\n    // Add rounded borders when not in fullscreen\r\n    // Remove any borders when in fullscreen\r\n    // Removing this feature for now\r\n    // const addRoundedBorders = () => {\r\n    //     if (screen.width !== window.innerWidth) {\r\n    //         document.getElementById('nav').classList.add('rounded-l-3xl');\r\n    //         document.getElementById('main').classList.add('rounded-r-3xl');\r\n\r\n    //         document.getElementById('nav').classList.remove('rounded-none');\r\n    //         document.getElementById('main').classList.remove('rounded-none');\r\n    //     }\r\n    //     else {\r\n    //         document.getElementById('nav').classList.add('rounded-none');\r\n    //         document.getElementById('main').classList.add('rounded-none');\r\n\r\n    //         document.getElementById('nav').classList.remove('rounded-l-3xl');\r\n    //         document.getElementById('main').classList.remove('rounded-r-3xl');\r\n    //     }\r\n    // };\r\n\r\n    // onMount(() => {\r\n    //     window.addEventListener('load', addRoundedBorders);\r\n    //     window.addEventListener('resize', addRoundedBorders);\r\n\r\n    //     return () => {\r\n    //         window.removeEventListener('load', addRoundedBorders);\r\n    //         window.removeEventListener('resize', addRoundedBorders);\r\n    //     }\r\n    // });\r\n</script>\r\n\r\n<!-- Editing Here -->\r\n<main\r\n    class=\"h-full\"\r\n    style=\"font-family: {$settings.font};\"\r\n>\r\n    <div class=\"flex flex-row h-full\">\r\n        <Nav />\r\n        <div\r\n            class=\"w-full h-full\"\r\n            id=\"main\"\r\n            style=\"background-color: {$settings.bgColor2};\"\r\n        >\r\n            <TitleBar currPage={_currPage}/>\r\n            <div class=\"px-4 mx-auto overflow-auto content-height\">\r\n                <slot />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n    /* Scrollbar styling */\r\n    ::-webkit-scrollbar {\r\n        width: 12px;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n        background: #374151;\r\n        margin-top: 24px;\r\n    }\r\n\r\n    /* Handle */\r\n    ::-webkit-scrollbar-thumb {\r\n        background: #8B5CF6;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: #6241ad;\r\n    }\r\n\r\n    /* Content height */\r\n    .content-height {\r\n        height: 90%;\r\n    }\r\n</style>\r\n","<script>\r\n    import { settings } from '../../Stores/settingsStore';\r\n\r\n    // Props\r\n    export let title = 'Title';\r\n    export let tooltip = 'This is a shell component';\r\n\r\n    // Check if component is in storage\r\n    function checkInStorage(component) {\r\n        const favorites = localStorage.favorites;\r\n        // Returns true if pokemon is in localStorage / team\r\n        if (strToArr(favorites).some(item => item === component)) return true;\r\n        // Returns false if pokemon is not present\r\n        else return false;\r\n    }\r\n\r\n    // Function to add / remove component from favourites\r\n    function toggleFavourites(e,component) {\r\n        const favorites = localStorage.favorites;\r\n        let elem = e.srcElement;\r\n        elem.classList += \"text-yellow-300\";\r\n        if (strToArr(favorites).some(item => item === component)) {\r\n            localStorage.favorites = (strToArr(favorites).filter(item => item !== component)).toString();\r\n        }\r\n        // Add component if not present in favorites\r\n        else {\r\n            const newFavorites = strToArr(localStorage.favorites);\r\n            newFavorites.push(component)\r\n            localStorage.favorites = (newFavorites).toString()\r\n        }\r\n    }\r\n\r\n    // Helper function\r\n    function strToArr(str) {\r\n    if (!str) return [];\r\n    return str.split(',');\r\n}\r\n</script>\r\n\r\n<div\r\n    class=\"rounded-md shadow-md p-2 \"\r\n    style=\"background-color: {$settings.bgColor3}; color: {$settings.fontColor1}\"\r\n>\r\n    <div class=\"flex flex-row justify-between items-center\">\r\n        <h3\r\n            class=\"text-lg font-semibold uppercase\"\r\n            style=\"color: {$settings.fontColor2};\"\r\n        >\r\n            {title}\r\n        </h3>\r\n        <div>\r\n            <span\r\n                class=\"ml-2 fas fa-info-circle cursor-pointer\"\r\n                title=\"{tooltip}\"\r\n            />\r\n            <span\r\n                class=\"ml-2 fas fa-star cursor-pointer {checkInStorage(title) ? 'text-yellow-500' : ''}\"\r\n                title=\"Add to favourites\"\r\n                on:click={(e) => toggleFavourites(e,title)}\r\n            />\r\n\r\n        </div>\r\n    </div>\r\n    <hr class=\"my-1 h-px bg-white\">\r\n    <div>\r\n        <slot />\r\n    </div>\r\n</div>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let netstat;\r\n\r\n    ipcRenderer.send('get-netstat-info');\r\n    ipcRenderer.on('get-netstat-info', (e, netstatInfo) => {\r\n        netstat = netstatInfo;\r\n        console.log(netstat);\r\n    });\r\n\r\n</script>\r\n\r\n<Shell title={\"Netstat\"} tooltip={\"List all current connections\"}>\r\n    <div class=\"text-gray-50\">\r\n        <div class = \"h-64 overflow-x-hidden\">\r\n\r\n            <div class=\"flex flex-col\">\r\n            <div class=\"overflow-auto sm:-mx-6 lg:-mx-8\">\r\n              <div class=\"py-1 inline-block min-w-full sm:px-6 lg:px-8\">\r\n                {#if netstat}\r\n                  <table class=\"\">\r\n\r\n                    <thead class=\"bg-gray border-b\">\r\n                      <tr>\r\n                        <th scope=\"col\" class=\"text-sm font-medium px-5 py-1\">\r\n                          Type\r\n                        </th>\r\n                        <th scope=\"col\" class=\"text-sm font-medium px-5 py-1\">\r\n                          Local IP\r\n                        </th>\r\n                        <th scope=\"col\" class=\"text-sm font-medium px-5 py-1\">\r\n                          Foriegn IP\r\n                        </th>\r\n                        <th scope=\"col\" class=\"text-sm font-medium px-5 py-1\">\r\n                          Status\r\n                        </th>\r\n                      </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n\r\n                      {#each netstat as ns}\r\n\r\n                      <tr class=\"bg-gray border-b\">\r\n                        <td class=\"px-5 py-1 whitespace-nowrap text-sm font-medium text-center\">\r\n                          {ns.proto}\r\n                        </td>\r\n                        <td class=\" px-5 py-1 text-sm font-light whitespace-nowrap text-center\">\r\n                          {ns.localip}\r\n                        </td>\r\n                        <td class=\" px-5 py-1 text-sm font-light whitespace-nowrap text-center\">\r\n                          {ns.foriegnip}\r\n                        </td>\r\n                        <td class=\" px-5 py-1 text-sm font-light whitespace-nowrap text-center\">\r\n                          {ns.state}\r\n                        </td>\r\n                      </tr>\r\n\r\n                      {/each}\r\n\r\n                    </tbody>\r\n\r\n                  </table>\r\n                  {/if}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n              <!-- <table class=\"\">\r\n                <tr class=\"\">\r\n                  <th class=\"border-2\">Type</th>\r\n                  <th class=\"border-2\">Incoming IP</th>\r\n                  <th class=\"border-2\">Foreign IP</th>\r\n                  <th class=\"border-2\">Status</th>\r\n                </tr>\r\n                {#each netstat as ns}\r\n                <tr class=\"border-2 h-16\">\r\n                  <td class=\"border-2\"><p class=\"p-2\">{ns.proto}</p></td>\r\n                  <td class=\"border-2\"><p class=\"p-2\">{ns.localip}</p></td>\r\n                  <td class=\"border-2\"><p class=\"p-2\">{ns.foriegnip}</p></td>\r\n                  <td class=\"border-2\"><p class=\"p-2\">{ns.state}</p></td>\r\n                </tr>\r\n                {/each}\r\n              </table> -->\r\n        </div>\r\n    </div>\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n</style>\r\n","const fs = require('fs')\r\n\r\nconst days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\nconst months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\r\n\r\nlet fName = new Date();\r\nlet day = days[fName.getDay()];\r\nlet month = months[fName.getMonth()];\r\nlet year = fName.getFullYear();\r\n\r\n\r\n\r\nconst fileStamp = `${day}_${month}_${year}`;\r\n\r\nconst Markers ={\r\n  INFO:'[INFO]:',\r\n  WARN:'[WARN]:',\r\n}\r\nObject.freeze(Markers);\r\n\r\n//Reserved for Library\r\nconst Header={\r\n  MSG:'[MESSAGE]:',\r\n  ERR:'[ERROR]:'\r\n}\r\nObject.freeze(Header);\r\n\r\n\r\nfunction logToText(params){\r\n\r\n  let currMark='';\r\n  let content;\r\n  let timeStamp = new Date();\r\n  let hours = timeStamp.getHours();\r\n  let minutes = timeStamp.getMinutes();\r\n  let seconds = timeStamp.getSeconds();\r\n\r\n  switch(params.mark){\r\n    case 'info':\r\n      currMark = Markers.INFO;\r\n      break;\r\n    case 'warn':\r\n      currMark = Markers.WARN;\r\n      break;\r\n    default:\r\n      if(!params.quiet) console.log(`${Header.ERR}No Valid Marker Specified,Logger Quitting`);\r\n      return;\r\n  }\r\n\r\n\r\n  content = `[${hours}:${minutes}:${seconds}]:${currMark} ${params.content}\\n`;\r\n\r\n  let stream = fs.createWriteStream(params.path, {flags:'a'});\r\n  stream.write(content);\r\n  stream.end();\r\n\r\n\r\n  if(!params.quiet) console.log(`${Header.MSG}Logged to File`);\r\n}\r\n\r\n\r\nfunction logSimple(path,content){\r\n  let wstream = fs.createWriteStream(path, {flags:'w'});\r\n  wstream.write(content);\r\n  wstream.end();\r\n}\r\n\r\nexport {logToText,logSimple,fileStamp};\r\n\r\n//logToText({path:'test.txt',content:\"HELLO\",mark:'info'},false);","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n    //Logex\r\n    import {logToText,logSimple,fileStamp} from '../../../Logex/Logex.js'\r\n\r\n\r\n    let networkSpeed;\r\n    let started=false;\r\n    let err=false;\r\n\r\n    const startTest=()=>{\r\n        ipcRenderer.send('get-network-speed');\r\n        started=true;\r\n    };\r\n\r\n    ipcRenderer.on('get-network-speed', (e, speedInfo) => {\r\n        networkSpeed = speedInfo;\r\n        if(networkSpeed==null)\r\n        {\r\n          err=true;\r\n        }\r\n        console.log(networkSpeed);\r\n\r\n        started=false;\r\n        if(!networkSpeed.err)\r\n        {\r\n          logSimple('./logs/api_logs/NetSpeedLog.txt',''+networkSpeed.downloadSpeed);\r\n          logSimple('./logs/api_logs/ispLog.txt',''+networkSpeed.client.isp);\r\n          logSimple('./logs/api_logs/testServerLocationLog.txt',''+networkSpeed.server.city);\r\n\r\n          //logSimple('./logs/raw_logs/NetSpeedLog.txt',''+networkSpeed.downloadSpeed);\r\n\r\n\r\n          logToText({\r\n            path:`./logs/clean_logs/NETSPEED_${fileStamp}.txt`,\r\n            content:`Test Time:${networkSpeed.totalTime} s | Speed:${networkSpeed.downloadSpeed} mbps`,\r\n            mark:'info',\r\n            quiet:false\r\n          });\r\n\r\n        }\r\n    });\r\n\r\n</script>\r\n\r\n<Shell title={\"Network Speed\"} tooltip={\"List network speed\"}>\r\n    <div class=\"flex flex-col justify-center mt-1 text-gray-50\">\r\n        <div class =\"flex flex-col justify-center items-center \">\r\n            {#if started}\r\n              <!-- <p><span class=\"font-bold text-lg\">Running!</span></p> -->\r\n              <Loader />\r\n              {:else}\r\n                <button type=\"button\" on:click={startTest} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Start Test</button>\r\n\r\n                <div class =\"grid grid-cols-2 gap-x-2 mt-2 {networkSpeed && !networkSpeed.err ? 'hidden' : ''}\">\r\n                  <div class=\"flex flex-col justify-start items-center\">\r\n                    <span>Speed</span>\r\n                    <p class=\"font-semibold text-xl\">\r\n                      N/A Mbps\r\n                    </p>\r\n                  </div>\r\n                  <div class=\"flex flex-col justify-start items-center\">\r\n                    <span>Time</span>\r\n                    <p class=\"font-semibold text-xl\">\r\n                      N/A s\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <!-- <p><span class=\"font-bold text-lg\">No Tests Running!</span></p> -->\r\n            {/if}\r\n        </div>\r\n\r\n        {#if networkSpeed}\r\n          {#if !networkSpeed.err}\r\n          <div class =\"grid grid-cols-2 gap-x-2 mt-2\">\r\n            <div class=\"flex flex-col justify-start items-center\">\r\n              <span>Speed</span>\r\n              <p class=\"font-semibold text-xl\">\r\n                {networkSpeed.downloadSpeed} Mbps\r\n              </p>\r\n            </div>\r\n            <div class=\"flex flex-col justify-start items-center\">\r\n              <span>Time</span>\r\n              <p class=\"font-semibold text-xl\">\r\n                {networkSpeed.totalTime} s\r\n              </p>\r\n            </div>\r\n          </div>\r\n            {:else}\r\n              <div class =\"flex flex-row justify-center mt-1\">\r\n\r\n                  <div class=\"flex flex-col items-center text-gray-50 p-4\">\r\n                  <p class='text-red-400 font-medium text-lg text-xl uppercase'>{networkSpeed.err}</p>\r\n                  </div>\r\n\r\n                </div>\r\n            {/if}\r\n          {/if}\r\n\r\n\r\n</Shell>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    \r\n    // Strength, length,\r\n    let password = '', strength = 0, length = 0;\r\n    let strengthColor = 'text-gray-200';\r\n    let lengthColor = 'text-gray-200';\r\n    const specialCharacters = ['!','@','#','$','%','^','&','*','(',')','{','}','[',']',';',':','\\'','\\\"','\\\\','|',',','.','<','>','?','/'];\r\n\r\n    const checkPassword = () => {\r\n        // test for length\r\n        if (password.length <= 4) length = 25, lengthColor = 'text-red-600';\r\n        else if (password.length <= 6) length = 50, lengthColor = 'text-yellow-600';\r\n        else if (password.length <= 8) length = 75, lengthColor = 'text-yellow-300';\r\n        else length = 100, lengthColor = 'text-green-600';\r\n\r\n        // test for strength\r\n        strength = 0;\r\n\r\n        // test for lowercase\r\n        if ((/[a-z]+/g).test(password)) strength += 1;\r\n        // test for uppercase\r\n        if ((/[A-Z]+/g).test(password)) strength += 1;\r\n        // test for numbers\r\n        if ((/[0-9]+/g).test(password)) strength += 1;\r\n        // test for specialCharacters\r\n        if (specialCharacters.some(item =>password.includes(item))) strength += 1;\r\n\r\n        switch (strength) {\r\n            case 0: strength = 0;\r\n                    strengthColor = 'text-red-600';\r\n                    break;\r\n            case 1: strength = 25;\r\n                    strengthColor = 'text-red-600';\r\n                    break;\r\n            case 2: strength = 50;\r\n                    strengthColor = 'text-yellow-600';\r\n                    break;\r\n            case 3: strength = 75;\r\n                    strengthColor = 'text-yellow-400';\r\n                    break;\r\n            case 4: strength = 100;\r\n                    strengthColor = 'text-green-600';\r\n                    break;\r\n        }\r\n    }\r\n</script>\r\n\r\n<Shell title={\"Password Checker\"} tooltip={\"Get detailed analysis of passwords\"}>\r\n    <div class=\"text-gray-50\">\r\n        <div class=\"flex flex-row\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Password\"\r\n            bind:value={password}\r\n            class=\"w-full rounded-md m-2 px-1 text-gray-800 font-semibold\"\r\n            required\r\n            on:keyup={checkPassword}\r\n            maxlength={32}\r\n          >\r\n        \r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-x-2 mt-2\">\r\n            <!-- Strength and length -->\r\n            <div class=\"flex flex-col justify-start items-center\">\r\n              <span>Strength</span>\r\n              <p class=\"font-semibold text-xl {strengthColor}\">\r\n                {strength} %\r\n              </p>\r\n            </div>\r\n            <div class=\"flex flex-col justify-start items-center\">\r\n              <span>Length</span>\r\n              <p class=\"font-semibold text-xl {lengthColor}\">\r\n              {password.length} s\r\n              </p>\r\n            </div>\r\n          </div>\r\n    </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let ssl, host = '';\r\n\r\n    const getSslInfo = () => {\r\n        ipcRenderer.send('get-ssl-info', host);\r\n        ipcRenderer.on('get-ssl-info', (e, sslInfo) => {\r\n            ssl = sslInfo;\r\n        });\r\n        // host = '';\r\n    }\r\n</script>\r\n\r\n<Shell title={\"SSL Checker\"} tooltip={\"SSL Certificate checker\"}>\r\n    <div class=\"text-gray-50\">\r\n        <div class=\"flex flex-row\">\r\n            <input type=\"text\" placeholder=\"Enter Domain Name\" bind:value={host} class=\"w-10/12 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n            <button type=\"button\" on:click={getSslInfo} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Search</button>\r\n            <!-- <input class=\"text-black\" type=\"text\" bind:value={host} placeholder=\"Domain Name\">\r\n            <button on:click={getSslInfo} type=\"button\">Search</button> -->\r\n        </div>\r\n        <div>\r\n            {#if ssl}\r\n                {#if !ssl.err}\r\n                    <p class=\"pt-2 \">&#8226; Days Left</p>\r\n                      <span class=\"ml-4 font-semibold text-lg\">{ssl.daysRemaining}</span>\r\n                    <p class=\"\">&#8226; Valid From</p>\r\n                      <span class=\"ml-4 font-semibold text-lg\">{ssl.validFrom.substring(0, 10)}</span>\r\n                    <p class=\"\">&#8226; Valid To</p>\r\n                      <span class=\"ml-4 font-semibold text-lg\">{ssl.validTo.substring(0, 10)}</span>\r\n                {:else}\r\n                    <p><span class=\"font-semibold text-lg\">Error: SSL certificate couldn't be found</span></p>\r\n                {/if}\r\n            {:else}\r\n              <p class=\"pt-2\">&#8226; Days Left</p>\r\n                <span class=\"ml-4 font-semibold text-lg\">N/A</span>\r\n              <p class=\"\">&#8226; Valid From</p>\r\n                <span class=\"ml-4 font-semibold text-lg\">N/A</span>\r\n              <p class=\"\">&#8226; Valid To</p>\r\n                <span class=\"ml-4 font-semibold text-lg\">N/A</span>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let dns, value = '';\r\n\r\n    const getDnsInfo = () => {\r\n        ipcRenderer.send('get-dns-lookup', value);\r\n        ipcRenderer.on('get-dns-lookup', (e, dnsInfo) => {\r\n            dns = dnsInfo;\r\n        });\r\n        // value = '';\r\n    }\r\n</script>\r\n\r\n<Shell title={\"DNS Lookup\"} tooltip={\"DNS Lookup Information\"}>\r\n    <div class=\"h-58 text-gray-50\">\r\n        <div class=\"flex flex-row\">\r\n        <input type=\"text\" placeholder=\"Enter Domain Name\" bind:value class=\"w-10/12 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n            <button on:click={getDnsInfo} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\" type=\"button\">Search</button>\r\n        </div>\r\n        <div class=\"mt-2 max-h-40 overflow-auto\">\r\n            {#if dns}\r\n                {#if !dns.err}\r\n                    <p>&#8226; IP Address</p>\r\n                      <span class=\"ml-8 font-semibold text-lg\">{dns.address}</span>\r\n                    <p>&#8226; Nameservers</p>\r\n                      {#each dns.ns as ns }\r\n                        <p class=\"ml-8 font-semibold text-lg\">{ns}</p>\r\n                      {/each}\r\n                    <p>&#8226; Mail Exchange</p>\r\n                      {#each dns.mx as mx }\r\n                        <p class=\"ml-8 font-semibold text-lg\">{mx}</p>\r\n                      {/each}\r\n                {:else}\r\n                    <p><span class=\"font-semibold text-lg\">Error: DNS couldn't be found</span></p>\r\n                {/if}\r\n            {:else}\r\n            <p>&#8226; IP Address</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n            <p>&#8226; Nameservers</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n            <p>&#8226; Mail Exchange</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n</style>\r\n","<script>\r\n    const { ipcRenderer } = require('electron');\r\n    import Shell from '../../Misc/Shell.svelte';\r\n\r\n    let geo , ip;\r\n    //ipcRenderer.send('get-whois-info');\r\n\r\n    const startLookup=()=>{\r\n      //console.log(\"test\");\r\n      ipcRenderer.send('get-geo-info',ip);\r\n      ipcRenderer.on('get-geo-info', (e, geoInfo) => {\r\n          geo = geoInfo;\r\n          console.log(geo);\r\n      });\r\n    };\r\n\r\n</script>\r\n\r\n<Shell title={\"IP Lookup\"} tooltip={\"Get Details about an IP Address\"}>\r\n  <div class=\"h-54 overflow-auto flex flex-col\">\r\n    <div class=\"flex flex-row justify-start\">\r\n    <input type=\"text\" placeholder=\"Enter IP\" bind:value={ip} class=\"w-10/12 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n    <button type=\"button\" on:click={startLookup} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Lookup</button>\r\n    </div>\r\n    <div class=\"flex flex-col items-start text-gray-50\">\r\n    {#if geo}\r\n        <p>&#8226; Country</p>\r\n        <span class=\"ml-6 font-semibold text-lg\">{geo.country}</span>\r\n        <p>&#8226; Region</p>\r\n        <span class=\"ml-6 font-semibold text-lg\">{geo.city}</span>\r\n        <p>&#8226; ISP/ORG</p>\r\n         <span class=\"ml-6 font-semibold text-lg\">{geo.isp}</span>\r\n\r\n    {:else}\r\n    <p>&#8226; Registrar URL</p>\r\n    <span class=\"ml-6 font-semibold text-lg\">N/A</span>\r\n    <p>&#8226; Region</p>\r\n    <span class=\"ml-6 font-semibold text-lg\">N/A , N/A</span>\r\n    <p>&#8226; Domain Expiry On</p>\r\n    <span class=\"ml-6 font-semibold text-lg\">N/A</span>\r\n    {/if}\r\n    </div>\r\n  </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let interfaces,pIp;\r\n    ipcRenderer.send('get-network-interfaces');\r\n    ipcRenderer.on('get-network-interfaces', (e, networkInfo) => {\r\n        interfaces = networkInfo;\r\n    });\r\n\r\n    ipcRenderer.send('get-p-ip');\r\n    ipcRenderer.on('get-p-ip', (e, ipInfo) => {\r\n        pIp = ipInfo;\r\n    });\r\n</script>\r\n\r\n<Shell title={\"Available Interfaces\"} tooltip={\"List of available network interfaces\"}>\r\n    <div class=\"text-gray-50 max-h-48 overflow-auto\">\r\n    {#if interfaces}\r\n      <p class=\"font-semibold text-lg\">&#8226; Current Public IP: <span class=\"font-semibold text-lg text-purple-400\">{pIp}</span></p>\r\n        {#if interfaces.length > 0}\r\n            {#if interfaces.length > 1}\r\n                {#each interfaces as {iface, ip4,mac,isDHCP,isInternal}, _id}\r\n                <br/>\r\n                <p>&#8226; <span class=\"font-semibold text-lg\">{iface}</span></p>\r\n                  {#if ip4===\"\"}\r\n                    <p class = \"pl-8\">IP4 Address: <span class=\"font-semibold text-lg\">N/A</span></p>\r\n                  {:else}\r\n                    <p class = \"pl-8\">IP4 Address: <span class=\"font-semibold text-lg\">{ip4}</span></p>\r\n                  {/if}\r\n                    <p class = \"pl-8\">MAC Address: <span class=\"font-semibold text-lg\">{mac}</span></p>\r\n                    <p class = \"pl-8\">DHCP: <span class=\"font-semibold text-lg\">{isDHCP}</span></p>\r\n                    <p class = \"pl-8\">Virtual: <span class=\"font-semibold text-lg\">{isInternal}</span></p>\r\n\r\n\r\n                {/each}\r\n            {:else}\r\n                <p>1. <span class=\"font-semibold text-lg\">{interfaces.iface}</span></p>\r\n                <p class = \"pl-8\" >IP4 Address: <span class=\"font-semibold text-lg\">{interfaces.ip4}</span></p>\r\n            {/if}\r\n        {:else}\r\n            <p>Couldn't find any interfaces.</p>\r\n        {/if}\r\n    {:else}\r\n      <div class=\"flex flex-row justify-center\">\r\n        <Loader />\r\n      </div>\r\n    {/if}\r\n    </div>\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n</style>\r\n","<script>\r\n\r\n    //Svelte\r\n    import { onMount, onDestroy } from 'svelte';\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import { settings } from '../../../Stores/settingsStore'\r\n\r\n    //Logex\r\n    import {logToText,logSimple,fileStamp} from '../../../Logex/Logex.js'\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let ping , name, pingInterval, timeList = [], pingChart, isChartVisible = true;\r\n    let logged=true;\r\n    let packetCount=0;\r\n\r\n    const stopTool=()=>{\r\n      //packetCount=0;\r\n      clearInterval(pingInterval);\r\n    }\r\n\r\n    const sendData=()=>{\r\n      packetCount=0;\r\n      name = document.getElementById(\"dname\").value;\r\n      pingInterval = setInterval(()=>{\r\n        logged=false;\r\n        ipcRenderer.send('get-ping-info',name);\r\n        ipcRenderer.on('get-ping-info', (e, pInfo) => {\r\n            ping = pInfo;\r\n            if(!logged){\r\n              packetCount +=1;\r\n              timeList = [...timeList, ping.time];\r\n              //console.log(timeList);\r\n              //console.log(''+ping.time);\r\n\r\n            logToText({\r\n              path:`./logs/clean_logs/PING_${fileStamp}_${ping.hst}.txt`,\r\n              content:`Time:${ping.time} ms | Alive:${ping.alive} | Loss:${ping.loss}`,\r\n              mark:'info',\r\n              quiet:false\r\n            });\r\n\r\n            logSimple('./logs/api_logs/PingLog.txt',''+ping.time);\r\n\r\n\r\n            // Create new chart each time ping data is received\r\n            const canvas = document.getElementById('ping-chart');\r\n            const ctx = canvas.getContext('2d');\r\n\r\n            if (pingChart) pingChart.destroy();\r\n            pingChart = new Chart(ctx , {\r\n              type: 'line',\r\n              options: {\r\n                maintainAspectRatio: false,\r\n                color: $settings.fontColor2,\r\n                scales: {\r\n                  x: {\r\n                    ticks: {\r\n                      color: $settings.fontColor2\r\n                    }\r\n                  },\r\n                  y: {\r\n                    ticks: {\r\n                      color: $settings.fontColor2\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              data: {\r\n                labels: timeList.map((item, index) => index),\r\n                datasets: [{\r\n                    label: 'Ping Chart',\r\n                    data: timeList,\r\n                    borderColor: $settings.miscColor,\r\n                    backgroundColor: $settings.miscColor,\r\n                    tension: 0.1\r\n                }]\r\n              }\r\n            })\r\n\r\n\r\n\r\n            logged=true;\r\n          }\r\n        });\r\n      },1000);\r\n    };\r\n\r\n    onMount(() => {\r\n      // setInterval(()=>{\r\n        const canvas = document.getElementById('ping-chart');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        // Create chart for Ping on initial mount\r\n        // If chart already exists, destroy it first\r\n        if (pingChart) pingChart.destroy();\r\n        pingChart = new Chart(ctx , {\r\n            type: 'line',\r\n            options: {\r\n              maintainAspectRatio: false,\r\n              color: $settings.fontColor2,\r\n              scales: {\r\n                x: {\r\n                  ticks: {\r\n                    color: $settings.fontColor2\r\n                  }\r\n                },\r\n                y: {\r\n                  ticks: {\r\n                    color: $settings.fontColor2\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            data: {\r\n                labels: timeList.map((item, index) => index),\r\n                datasets: [{\r\n                    label: 'Ping Chart',\r\n                    data: timeList,\r\n                    borderColor: $settings.miscColor,\r\n                    backgroundColor: $settings.miscColor,\r\n                    tension: 0.1\r\n                }]\r\n            }\r\n        })\r\n    });\r\n\r\n    onDestroy(() => {\r\n      packetCount=0;\r\n      timeList = [];\r\n      console.log('Component Unmounted');\r\n      clearInterval(pingInterval);\r\n      pingChart.destroy()\r\n    });\r\n\r\n    const clearData = () => {\r\n      clearInterval(pingInterval);\r\n      ping = null;\r\n      timeList = [];\r\n    }\r\n</script>\r\n\r\n<Shell title={\"Ping Tool\"} tooltip={\"Check Ping Data w/Graphs and Stats\"}>\r\n  <div class=\"flex flex-col\">\r\n    <div class=\"flex flex-row justify-center mt-1 md:h-12\">\r\n    <input id=\"dname\" type=\"text\" placeholder=\"Enter IP/Domain\" value=\"\" class=\"w-3/5 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n    <button type=\"button\" on:click={sendData} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Start</button>\r\n    <button type=\"button\" on:click={stopTool} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Stop</button>\r\n    <button type=\"button\" on:click={() => isChartVisible = !isChartVisible} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">{isChartVisible ? 'Stats' : 'Graph'}</button>\r\n    <button type=\"button\" on:click={clearData} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\">Clear</button>\r\n    </div>\r\n    <div class=\"mt-1 md:mt-3 flex flex-col items-center text-gray-50\">\r\n    {#if ping}\r\n    {#if !isChartVisible}\r\n    <div class='h-36 grid grid-cols-5 md:grid-cols-5'>\r\n\r\n\r\n    <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n      <p class='text-white'>Host</p>\r\n        <div class='flex flex-row'>\r\n          <p class='font-semibold text-white text-xl'>{ping.hst}</p>&nbsp\r\n        </div>\r\n    </div>\r\n\r\n    <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n      <p class='text-white'>Sent</p>\r\n        <div class='flex flex-row'>\r\n          <p class='font-semibold text-white text-xl'>{packetCount}</p>&nbsp\r\n        </div>\r\n    </div>\r\n\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Time</p>\r\n            <div class='flex flex-row'>\r\n              <p class='font-semibold text-white text-xl'>{ping.time}</p>&nbsp\r\n              <p class='font-semibold text-white text-xl'>ms</p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-1 m-1 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Alive</p>\r\n            <div class='flex flex-row'>\r\n              <p class='font-semibold text-white text-xl' style=\"text-transform: capitalize;\">{ping.alive}</p>&nbsp\r\n              <p class='font-semibold text-white text-xl'></p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-1 m-1 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Loss</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>{ping.loss}</p>&nbsp\r\n              <p class='font-semibold text-white text-sm'></p>\r\n            </div>\r\n        </div>\r\n\r\n      </div>\r\n      {/if}\r\n      <div class=\"w-11/12 h-36 {isChartVisible ? 'block' : 'hidden'}\">\r\n          <canvas id=\"ping-chart\" />\r\n      </div>\r\n<!-- <p>Alive : {ping.alive}</p> -->\r\n\r\n    {:else}\r\n        {#if !isChartVisible}\r\n        <div class='h-36 grid grid-cols-5 md:grid-cols-5'>\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Host</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>N/A</p>&nbsp\r\n              <p class='font-semibold text-white text-sm'></p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Sent</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>N/A</p>&nbsp\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Time</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>N/A</p>&nbsp\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Alive</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>N/A</p>&nbsp\r\n              <p class='font-semibold text-white text-xl'></p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class='p-2 m-2 flex flex-col justify-center items-center'>\r\n          <p class='text-white'>Loss</p>\r\n            <div class='flex flex-row'>\r\n              <p id=\"infoValueCPN\" class='font-semibold text-white text-xl'>N/A</p>&nbsp\r\n              <p class='font-semibold text-white text-sm'></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    {/if}\r\n    <div class=\"w-11/12 h-36 {isChartVisible ? 'block' : 'hidden'}\">\r\n        <canvas id=\"ping-chart\" />\r\n    </div>\r\n    {/if}\r\n    </div>\r\n  </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let port, value = '';\r\n    let search = false;\r\n\r\n    const getPortInfo = () => {\r\n        search=true;\r\n        port=null;\r\n        ipcRenderer.send('get-open-ports', value);\r\n        // value = '';\r\n    };\r\n\r\n    ipcRenderer.on('get-open-ports', (e, portInfo) => {\r\n        port = portInfo;\r\n        search=false;\r\n    });\r\n\r\n</script>\r\n\r\n<Shell title={\"Port Scanning\"} tooltip={\"Scan Open Ports\"}>\r\n    <div class=\"text-gray-50\">\r\n        <div class=\"flex flex-row\">\r\n        <input type=\"text\" placeholder=\"Enter IP\" bind:value class=\"w-10/12 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n            <button on:click={getPortInfo} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\" type=\"button\">Scan</button>\r\n        </div>\r\n        <div class=\"mt-2 max-h-48 overflow-auto w-full\">\r\n            {#if port}\r\n              <p>&#8226; Open Ports</p>\r\n              {#each port as portNumber}\r\n              <span class=\"ml-8 font-semibold text-lg block\">{portNumber}</span>\r\n              {/each}\r\n            {:else if search}\r\n              <!-- <p>&#8226; SEARCHING</p> -->\r\n              <div class=\"flex flex-row justify-center\">\r\n                <Loader />\r\n              </div>\r\n              <!-- {:else if port.err}\r\n                <p>&#8226; porterr</p> -->\r\n            {:else}\r\n            <p>&#8226; Open Ports</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let cpu;\r\n    ipcRenderer.send('get-cpu-info');\r\n    ipcRenderer.on('get-cpu-info', (e, cpuInfo) => {\r\n        cpu = cpuInfo;\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"CPU Information\"}\r\n    tooltip={\"Information about the CPU\"}\r\n>\r\n    {#if cpu}\r\n    <div class=\"pl-2 flex flex-col items-start text-gray-50\">\r\n        <p>&#8226; Processor:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{cpu.brand}</span> </p>\r\n        <p>&#8226; Speed:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{cpu.speed} GHz</span></p>\r\n\r\n        <p>&#8226; Cores:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{cpu.cores}</span></p>\r\n\r\n        <p>&#8226; Socket:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{cpu.socket}</span></p>\r\n\r\n    </div>\r\n    {:else}\r\n        <div class=\"flex flex-row justify-center\">\r\n        <Loader />\r\n        </div>\r\n    {/if}\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import { onMount } from 'svelte';\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let disk;\r\n    let diskChart;\r\n\r\n    // Editing Here\r\n    onMount(() => {\r\n      // setInterval(()=>{\r\n        const canvas = document.getElementById('disk-doughnut');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ipcRenderer.send('get-disk-usage');\r\n        ipcRenderer.on('get-disk-usage', (e, dInfo) => {\r\n            disk = dInfo;\r\n            console.log(disk);\r\n            if (diskChart) diskChart.destroy();\r\n            diskChart = new Chart(ctx , {\r\n                type: 'pie',\r\n                options: {\r\n                    animation: {\r\n                        duration: 0,\r\n                    },\r\n                    color: 'rgb(249, 250, 251)',\r\n                },\r\n                data: {\r\n                    labels: ['Used Space', 'Free Space'],\r\n                    datasets: [{\r\n                        label: 'Disk Usage Monitor',\r\n                        data: [\r\n                            (disk.total / Math.pow(10, 9)) - (disk.free / Math.pow(10, 9)),\r\n                            disk.free / Math.pow(10, 9)\r\n                        ],\r\n                        backgroundColor: [\r\n                            'rgb(167, 139, 250)',\r\n                            'rgb(124, 58, 237)',\r\n                            'rgb(91, 33, 182)'\r\n                        ],\r\n                        hoverOffset: 0,\r\n                        borderColor: '#000000',\r\n                        borderWidth: .5\r\n                    }]\r\n                }\r\n            });\r\n        });\r\n      // },2000);\r\n\r\n        // onDestroy\r\n        return () => {\r\n          diskChart.destroy();\r\n        }\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Disk Space\"}\r\n    tooltip={\"Disk Space plotted on a Pie chart\"}\r\n>\r\n    <div\r\n        class=\"w-4/5 md:w-1/2 mx-auto\"\r\n        id=\"canvas-container\"\r\n    >\r\n        <canvas id=\"disk-doughnut\" />\r\n        {#if disk}\r\n        <p class=\"text-center text-sm mt-2\">\r\n            Disk Space in GB\r\n        </p>\r\n        {:else}\r\n        <div class=\"flex flex-row justify-center\">\r\n          <Loader />\r\n        </div>\r\n        {/if}\r\n    </div>\r\n</Shell>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let graphics;\r\n    ipcRenderer.send('get-graphics-info');\r\n    ipcRenderer.on('get-graphics-info', (e, graphicsInfo) => {\r\n        graphics = graphicsInfo;\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Graphics Card Data\"}\r\n    tooltip={\"Information about the Primary Graphics Driver\"}\r\n>\r\n    {#if graphics}\r\n    <div class=\"pl-2 flex flex-col items-start text-gray-50\">\r\n        <p>&#8226; Model:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.model}</span> </p>\r\n        <p>&#8226; Vendor:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.vendor}</span></p>\r\n        <p>&#8226; Bus:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.bus}</span></p>\r\n        <p>&#8226; VRAM:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.vram} Mb</span></p>\r\n        <p>&#8226; Connection:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.connection}</span></p>\r\n        <p>&#8226; Display Model:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.display}</span></p>\r\n        <p>&#8226; Refresh Rate:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.refresh} Hz</span></p>\r\n        <p>&#8226; Resolution(X):<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.resx}</span></p>\r\n        <p>&#8226; Resolution(Y):<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{graphics.resy}</span></p>\r\n\r\n    </div>\r\n    {:else}\r\n    <div class=\"flex flex-row justify-center\">\r\n      <Loader />\r\n    </div>\r\n    {/if}\r\n\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let os;\r\n    ipcRenderer.send('get-os-info');\r\n    ipcRenderer.on('get-os-info', (e, osInfo) => {\r\n        os = osInfo;\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Operating System\"}\r\n    tooltip={\"Information about the operating system\"}\r\n>\r\n    {#if os}\r\n    <div class=\"pl-2 flex flex-col items-start text-gray-50\">\r\n        <p>&#8226; Platform:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{os.platform}</span> </p>\r\n        <p>&#8226; Hostname:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{os.hostname}</span></p>\r\n\r\n        <p>&#8226; Kernel:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{os.kernel}</span></p>\r\n\r\n        <p>&#8226; Architecture:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{os.arch}</span></p>\r\n\r\n    </div>\r\n    {:else}\r\n      <div class=\"flex flex-row justify-center\">\r\n      <Loader />\r\n      </div>\r\n    {/if}\r\n</Shell>\r\n","<script>\r\n    //Svelte\r\n    import { onMount } from 'svelte';\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte';\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n    let ram;\r\n    let ramChart;\r\n\r\n    setInterval(()=>{\r\n      ipcRenderer.send('get-ram-info');\r\n    },4000);\r\n\r\n    // Editing Here\r\n    onMount(() => {\r\n      // setInterval(()=>{\r\n        ipcRenderer.send('get-ram-info');\r\n        const canvas = document.getElementById('ram-doughnut');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ipcRenderer.on('get-ram-info', (e, ramInfo) => {\r\n            ram = ramInfo;\r\n            // Create chart for RAM monitor\r\n            // If chart already exists, destroy it first\r\n            if (ramChart) ramChart.destroy();\r\n            ramChart = new Chart(ctx , {\r\n                type: 'doughnut',\r\n                options: {\r\n                    animation:{\r\n                      duration:0\r\n                    },\r\n                    cutout: '75%',\r\n                    color: 'rgb(249, 250, 251)',\r\n                },\r\n                data: {\r\n                    labels: ['Total', 'Used', 'Free'],\r\n                    datasets: [{\r\n                        label: 'Ram Monitor',\r\n                        data: [\r\n                            Number(String(ram.total / Math.pow(2, 30)).substring(0, 3 + String(ram.total / Math.pow(2, 30)).indexOf('.'))),\r\n                            Number(String(ram.used / Math.pow(2, 30)).substring(0, 3 + String(ram.total / Math.pow(2, 30)).indexOf('.'))),\r\n                            Number(String(ram.free / Math.pow(2, 30)).substring(0, 3 + String(ram.total / Math.pow(2, 30)).indexOf('.')))\r\n                        ],\r\n                        backgroundColor: [\r\n                            'rgb(91, 33, 182)',\r\n                            'rgb(124, 58, 237)',\r\n                            'rgb(167, 139, 250)'\r\n                        ],\r\n                        hoverOffset: 0,\r\n                        borderColor: '#000000',\r\n                        borderWidth: .5\r\n                    }]\r\n                }\r\n            });\r\n        });\r\n      // },2000);\r\n\r\n        // onDestroy\r\n        return () => {\r\n            ramChart.destroy();\r\n        }\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Ram Monitor\"}\r\n    tooltip={\"RAM utilization plotted on a doughnut chart\"}\r\n>\r\n    <div\r\n        class=\"w-4/5 md:w-1/2 mx-auto\"\r\n        id=\"canvas-container\"\r\n    >\r\n        <canvas id=\"ram-doughnut\" />\r\n        {#if ram}\r\n        <p class=\"text-center text-sm mt-2\">\r\n            Memory in GB\r\n        </p>\r\n        {:else}\r\n        <div class=\"flex flex-row justify-center\">\r\n          <Loader />\r\n        </div>\r\n        {/if}\r\n    </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import { onMount } from 'svelte';\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let use;\r\n    let useChart;\r\n\r\n    const chartInterval = setInterval(()=>{\r\n      ipcRenderer.send('get-cpu-usage');\r\n    },2000);\r\n\r\n    // Editing Here\r\n    onMount(() => {\r\n      // setInterval(()=>{\r\n        const canvas = document.getElementById('use-doughnut');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ipcRenderer.send('get-cpu-usage');\r\n        ipcRenderer.on('get-cpu-usage', (e, usageInfo) => {\r\n            use = usageInfo;\r\n            if (useChart) useChart.destroy();\r\n            useChart = new Chart(ctx , {\r\n                type: 'pie',\r\n                options: {\r\n                    animation: {\r\n                        duration: 0,\r\n                    },\r\n                    color: 'rgb(249, 250, 251)',\r\n                },\r\n                data: {\r\n                    labels: ['System Load', 'Load Capacity'],\r\n                    datasets: [{\r\n                        label: 'CPU Monitor',\r\n                        data: [\r\n                          // use.currSys ,\r\n                          use.curr,\r\n                          100.00\r\n                        ],\r\n                        backgroundColor: [\r\n                            'rgb(167, 139, 250)',\r\n                            'rgb(124, 58, 237)',\r\n                            'rgb(91, 33, 182)'\r\n                        ],\r\n                        hoverOffset: 0,\r\n                        borderColor: '#000000',\r\n                        borderWidth: .5\r\n                    }]\r\n                }\r\n            });\r\n        });\r\n      // },2000);\r\n\r\n        // onDestroy\r\n        return () => {\r\n            useChart.destroy();\r\n            clearInterval(chartInterval);\r\n        }\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"CPU Utilization\"}\r\n    tooltip={\"CPU Load plotted on a Pie chart\"}\r\n>\r\n    <div\r\n        class=\"w-4/5 md:w-1/2 mx-auto\"\r\n        id=\"canvas-container\"\r\n    >\r\n        <canvas id=\"use-doughnut\" />\r\n        {#if use}\r\n        <p class=\"text-center text-sm mt-2\">\r\n            CPU Load in %\r\n        </p>\r\n        {:else}\r\n        <div class=\"flex flex-row justify-center\">\r\n          <Loader />\r\n        </div>\r\n        {/if}\r\n    </div>\r\n</Shell>\r\n","<script>\r\n\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let info, data;\r\n    ipcRenderer.send('get-wifi-info');\r\n    ipcRenderer.on('get-wifi-info', (e, wifiInfo) => {\r\n        info = wifiInfo;\r\n        data = info[0];\r\n    });\r\n\r\n    // Function to display information for selected wifi connection\r\n    const displayInfo = ssid => {\r\n        data = info.filter(item => item.ssid === ssid)[0];\r\n    };\r\n</script>\r\n\r\n<Shell\r\n    title={\"Wifi Connections\"}\r\n    tooltip={\"General wifi related information\"}\r\n>\r\n    {#if info}\r\n    <!-- Available Wifi Connections -->\r\n    <p\r\n        class=\"text-sm\"\r\n        style=\"color: {$settings.fontColor2}; text-align:center\"\r\n    >\r\n        <!-- Available Wifi Connections -->\r\n    </p>\r\n\r\n    <div class=\"h-64 overflow-x-hidden flex flex-col mb-2\">\r\n\r\n      <div class=\"flex flex-col mb-2\">\r\n        <ul class=\"\">\r\n        <!-- add empty check -->\r\n            {#each info as wifi}\r\n            <li\r\n                class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600 cursor-pointer inline-block\"\r\n                on:click={() => displayInfo(wifi.ssid)}\r\n            >\r\n            {wifi.ssid}\r\n            </li>\r\n            {/each}\r\n        </ul>\r\n        </div>\r\n\r\n        <div class=\"flex flex-col items-start text-gray-50\">\r\n            <p>&#9670 SSID</p>\r\n            <span class=\"ml-6 font-semibold text-lg\">{data.ssid}</span>\r\n            <p>&#9670 BSSID</p>\r\n            <span class=\"ml-6 font-semibold text-lg\">{data.bssid}</span>\r\n            <p>&#9670 Frequency</p>\r\n             <span class=\"ml-6 font-semibold text-lg\">{data.frequency}</span>\r\n            <p>&#9670 Security</p>\r\n             <span class=\"ml-6 font-semibold text-lg\">{data.security}</span>\r\n            <p>&#9670 Channel</p>\r\n             <span class=\"ml-6 font-semibold text-lg\">{data.channel}</span>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Display required information -->\r\n    <!-- <div class=\"grid grid-cols-2 gap-x-2 gap-y-6\">\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                SSID\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                {data.ssid}\r\n            </span>\r\n        </p>\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                BSSID\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                {data.bssid}\r\n            </span>\r\n        </p>\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                Mode\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                N/A\r\n            </span>\r\n        </p>\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                Channel\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                {data.channel}\r\n            </span>\r\n        </p>\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                Frequency\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                {data.frequency} GHz\r\n            </span>\r\n        </p>\r\n        <p class=\"flex flex-col justify-start items-center\">\r\n            <span\r\n                class=\" pb-1\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                Security\r\n            </span>\r\n            <span class=\"font-semibold text-lg\">\r\n                {data.security}\r\n            </span>\r\n        </p>\r\n    </div>\r\n     -->\r\n     <!-- <div class=\"flex flex-col items-start text-gray-50\">\r\n         <p>&#9670 SSID</p>\r\n         <span class=\"ml-6 font-semibold text-lg\">{data.ssid}</span>\r\n         <p>&#9670 BSSID</p>\r\n         <span class=\"ml-6 font-semibold text-lg\">{data.bssid}</span>\r\n         <p>&#9670 Channel</p>\r\n          <span class=\"ml-6 font-semibold text-lg\">{data.channel}</span>\r\n         <p>&#9670 Frequency</p>\r\n          <span class=\"ml-6 font-semibold text-lg\">{data.frequency}</span>\r\n         <p>&#9670 Security</p>\r\n          <span class=\"ml-6 font-semibold text-lg\">{data.security}</span>\r\n     </div> -->\r\n\r\n    {:else}\r\n    <div class=\"flex flex-row justify-center\">\r\n      <Loader />\r\n    </div>\r\n    {/if}\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let data;\r\n    ipcRenderer.send('get-local-devices');\r\n    ipcRenderer.on('get-local-devices', (e, deviceInfo) => {\r\n        data = deviceInfo;\r\n        console.log(data);\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"ARP Table\"}\r\n    tooltip={\"Shows the IP and MAC address of devices connected to the local network\"}\r\n>\r\n    {#if data}\r\n\r\n    <div class=\"h-64 overflow-x-hidden\">\r\n    <!-- <div class=\"pl-2 mb-3 flex flex-col items-start text-gray-50\">\r\n        <p>&#8226; IP:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{d.ip}</span> </p>\r\n        <p>&#8226; Mac:<span class=\"ml-2 font-bold text-lg\" style=\"color: {$settings.fontColor2}\">{d.mac}</span></p>\r\n    </div> -->\r\n    <table class=\"w-full\">\r\n\r\n      <thead class=\"bg-gray border-b\">\r\n        <tr>\r\n          <th scope=\"col\" class=\"text-sm font-medium  py-1 w-1/2\">\r\n            Local IP\r\n          </th>\r\n          <th scope=\"col\" class=\"text-sm font-medium  py-1 w-1/2\">\r\n            Mac Address\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n\r\n      {#each data as d}\r\n\r\n        <tr class=\"bg-gray border-b\">\r\n          <td class=\"px-5 py-1 whitespace-nowrap text-sm font-medium text-center\">\r\n            {d.ip}\r\n          </td>\r\n          <td class=\" px-5 py-1 text-sm font-light whitespace-nowrap text-center\">\r\n            {d.mac}\r\n          </td>\r\n        </tr>\r\n\r\n        {/each}\r\n\r\n      </tbody>\r\n\r\n    </table>\r\n\r\n    </div>\r\n\r\n    {:else}\r\n        <div class=\"flex flex-row justify-center\">\r\n        <Loader />\r\n        </div>\r\n    {/if}\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import Page from './_page.svelte';\r\n    import { settings } from '../Stores/settingsStore';\r\n    import Greeting from '../Components/Main/Greeting.svelte'\r\n\r\n    // Components\r\n    import Netstat from '../Components/Diagnostics/Netstat/Netstat.svelte';\r\n    import NetworkSpeed from '../Components/Diagnostics/NetworkSpeed/NetworkSpeed.svelte';\r\n    import PasswordStrength from '../Components/Diagnostics/PasswordStrength/PasswordStrength.svelte';\r\n    import SslChecker from '../Components/Diagnostics/SslChecker/SslChecker.svelte';\r\n    import Dns from '../Components/Network/Dns/Dns.svelte';\r\n    import IpTools from '../Components/Network/IPTools/IPTools.svelte';\r\n    import NetworkInterfaces from '../Components/Network/NetworkInterfaces/NetworkInterfaces.svelte';\r\n    import Ping from '../Components/Network/Ping/Ping.svelte';\r\n    import Ports from '../Components/Network/Ports/Ports.svelte';\r\n    import Whois from '../Components/Network/Whois/Whois.svelte';\r\n    import Cpu from '../Components/System/Cpu/Cpu.svelte';\r\n    import Speed from '../Components/System/Cpu/Speed.svelte';\r\n    import Disk from '../Components/System/Disk/Disk.svelte';\r\n    import Graphics from '../Components/System/Graphics/Graphics.svelte';\r\n    import OSinfo from '../Components/System/OS/OSinfo.svelte';\r\n    import Ram from '../Components/System/Ram/Ram.svelte';\r\n    import Usage from '../Components/System/Usage/Usage.svelte';\r\n    import Info from '../Components/Wifi/Info/Info.svelte';\r\n    import Interfaces from '../Components/Wifi/Interfaces/Interfaces.svelte';\r\n    import Ssid from '../Components/Wifi/Ssid/Ssid.svelte';\r\n    import LocalDevices from '../Components/Diagnostics/ArpLD/LocalDevices.svelte';\r\n\r\n    const components = [\r\n      {\r\n        name: 'Ping Tool',\r\n        component: Ping\r\n      },\r\n      {\r\n        name: 'IP Lookup',\r\n        component: IpTools\r\n      },\r\n      {\r\n        name: 'Available Interfaces',\r\n        component: NetworkInterfaces\r\n      },\r\n      {\r\n        name: 'Local Devices',\r\n        component: LocalDevices\r\n      },\r\n      {\r\n        name: 'DNS Lookup',\r\n        component: Dns\r\n      },\r\n      {\r\n        name: 'Port Scanning',\r\n        component: Ports\r\n      },\r\n      {\r\n        name: 'Netstat',\r\n        component: Netstat\r\n      },\r\n      {\r\n        name: 'SSL Checker',\r\n        component: SslChecker\r\n      },\r\n      {\r\n        name: 'Wifi Information',\r\n        component: Info\r\n      },\r\n      {\r\n        name: 'Password Checker',\r\n        component: PasswordStrength\r\n      },\r\n      {\r\n        name: 'Network Speed',\r\n        component: NetworkSpeed\r\n      },\r\n      {\r\n        name: 'CPU Information',\r\n        component: Cpu\r\n      },\r\n      {\r\n        name: 'Operating System',\r\n        component: OSinfo\r\n      },\r\n      {\r\n        name: 'Ram Monitor',\r\n        component: Ram\r\n      },\r\n      {\r\n        name: 'Graphics Card Data',\r\n        component: Graphics\r\n      },\r\n      {\r\n        name: 'Disk Space',\r\n        component: Disk\r\n      },\r\n      {\r\n        name: 'CPU Utilization',\r\n        component: Usage\r\n      }\r\n    ];\r\n\r\n    // Function to check if a component is present in favorites\r\n    function checkInStorage(component) {\r\n      const favorites = localStorage.favorites;\r\n      if (strToArr(favorites).some(item => item === component)) return true;\r\n      else return false;\r\n    }\r\n\r\n    // Helper function\r\n    function strToArr(str) {\r\n      if (!str) return [];\r\n      return str.split(',');\r\n    }\r\n\r\n</script>\r\n\r\n<Page>\r\n    <!-- <Greeting /> -->\r\n    <!-- <p class = \"text-3xl text-white font-bold\">Hello {$settings.username}!</p> -->\r\n    {#if !localStorage.favorites}\r\n    <div class=\"flex flex-col justify-center items-center h-full\">\r\n      <h2 class=\"text-lg\" style=\"color: {$settings.fontColor1}\">\r\n        You do not have any favourite widgets.\r\n      </h2>\r\n    </div>\r\n    {:else}\r\n    <h2 class=\"mt-10 text-xl mt-4 px-6\" style=\"color: {$settings.fontColor1}\">\r\n      Favourite Widgets\r\n    </h2>\r\n    <div class=\"p-6 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\r\n      <!-- <Greeting /> -->\r\n      {#each components as {name, component}}\r\n      {#if checkInStorage(name)}\r\n      <svelte:component this={component} />\r\n      {/if}\r\n      {/each}\r\n    </div>\r\n\r\n    {/if}\r\n</Page>\r\n","<script>\r\n\r\n  //Svelte\r\n  import Shell from '../../Misc/Shell.svelte';\r\n\r\n  //Electron\r\n  const { ipcRenderer } = require('electron');\r\n\r\n\r\n  let netmask, value = '';\r\n\r\n  const getNetmaskInfo = () => {\r\n      ipcRenderer.send('get-netmask-info', value);\r\n      ipcRenderer.on('get-netmask-info', (e, dnsInfo) => {\r\n        netmask = dnsInfo;\r\n      });\r\n  }\r\n</script>\r\n\r\n<Shell title={\"Netmask\"} tooltip={\"Information related to IPv4 CIDR\"}>\r\n  <div class=\"text-gray-50\">\r\n      <div class=\"flex flex-row\">\r\n      <input type=\"text\" placeholder=\"Enter IPv4 Address\" bind:value class=\"w-10/12 rounded-md m-2 px-1 text-gray-800 font-semibold\">\r\n          <button on:click={getNetmaskInfo} class=\"text-sm bg-purple-500 px-2 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\" type=\"button\">Search</button>\r\n      </div>\r\n      <div class=\"mt-2 max-h-48 overflow-auto\">\r\n          {#if netmask}\r\n              {#if !netmask.err}\r\n              <p>&#8226; Base Address</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.base}</span>\r\n            <p>&#8226; Mask</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.mask}</span>\r\n            <p>&#8226; Bitmask</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.bitmask}</span>\r\n            <p>&#8226; Host Mask</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.hostmask}</span>\r\n            <p>&#8226; Broadcast</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.broadcast}</span>\r\n            <p>&#8226; Size</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.size}</span>\r\n            <p>&#8226; First</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.first}</span>\r\n            <p>&#8226; Last</p>\r\n              <span class=\"ml-8 font-semibold text-lg\">{netmask.last}</span>\r\n              {:else}\r\n                  <p><span class=\"font-semibold text-lg\">Error: DNS couldn't be found</span></p>\r\n              {/if}\r\n          {:else}\r\n          <p>&#8226; Base Address</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Mask</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Bitmask</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Host Mask</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Broadcast</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Size</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; First</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          <p>&#8226; Last</p>\r\n            <span class=\"ml-8 font-semibold text-lg\">N/A</span>\r\n          {/if}\r\n      </div>\r\n  </div>\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n  /* Content height */\r\n  .content-height {\r\n      height: 90%;\r\n  }\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let nx;\r\n    setInterval(()=>{\r\n    ipcRenderer.send('get-nx-info');\r\n  },1000);\r\n\r\n    // ipcRenderer.send('get-nx-info');\r\n    ipcRenderer.on('get-nx-info', (e, nxInfo) => {\r\n        nx = nxInfo;\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Network Status\"}\r\n    tooltip={\"Network stats for the default interface\"}\r\n>\r\n    {#if nx}\r\n    <div class=\"pl-2 flex flex-col items-start text-gray-50\">\r\n        <p>&#8226; Interface:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.iface}</span> </p>\r\n        <p>&#8226; Received Bytes:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.rx}</span> </p>\r\n        <p>&#8226; Received Dropped:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.rxd}</span> </p>\r\n        <p>&#8226; Received Errors:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.rxe}</span> </p>\r\n        <p>&#8226; Trasnmitted Bytes:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.tx}</span> </p>\r\n        <p>&#8226; Transmitted Dropped:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.txd}</span> </p>\r\n        <p>&#8226; Transmitted Errors:<span class=\"ml-2 font-semibold text-lg\" style=\"color: {$settings.fontColor2}\">{nx.txe}</span> </p>\r\n\r\n\r\n\r\n    </div>\r\n    {:else}\r\n    <div class=\"flex flex-row justify-center\">\r\n      <Loader />\r\n    </div>\r\n    {/if}\r\n\r\n</Shell>\r\n","<script>\r\n    //Svelte\r\n    import Shell from '../../Misc/Shell.svelte';\r\n    import Loader from '../../Misc/Loader.svelte'\r\n    import { settings } from '../../../Stores/settingsStore';\r\n\r\n    //Electron\r\n    const { ipcRenderer } = require('electron');\r\n\r\n\r\n    let proc;\r\n    ipcRenderer.send('get-proc-info');\r\n    ipcRenderer.on('get-proc-info', (e, procInfo) => {\r\n        proc = procInfo;\r\n        console.log(proc);\r\n    });\r\n</script>\r\n\r\n<Shell\r\n    title={\"Process List\"}\r\n    tooltip={\"Information about running processes\"}\r\n>\r\n\r\n    <div class=\"pl-2 flex flex-row items-start text-gray-50 overflow-auto\">\r\n    {#if proc}\r\n      {#each proc as {pid,name,priority,started}}\r\n        <div class=\"bg-purple-500 rounded-md flex flex-col items-start m-2 mb-4 p-3\">\r\n            <p class=\"truncate\">PID: <span class=\"font-semibold text-md\">{pid}</span></p>\r\n            <p class=\"font-semibold text-lg truncate\">{name}</p>\r\n            <p class=\"truncate\">Priority: <span class=\"font-semibold text-md\">{priority}</span></p>\r\n            <p class=\"truncate\">Started On: <span class=\"font-semibold text-md\">{started}</span></p>\r\n        </div>\r\n      {/each}\r\n    {:else}\r\n    <div class=\"flex flex-row justify-center\">\r\n      <Loader />\r\n    </div>\r\n    {/if}\r\n\r\n</Shell>\r\n\r\n<style>\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n      width: 12px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n      background: #374151;\r\n      margin-top: 24px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n      background: #8B5CF6;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n      background: #6241ad;\r\n  }\r\n\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import { onMount } from 'svelte';\r\n    import Page from './_page.svelte';\r\n    import { settings } from '../Stores/settingsStore';\r\n    const fs = require('fs');\r\n\r\n    let isChecked = localStorage.checked === \"true\" ? true : false;\r\n    let isSpeed = localStorage.speed === \"true\" ? true : false;\r\n    let isLocation = localStorage.location === \"true\" ? true : false;\r\n    let isFrequency = localStorage.frequency == \"true\" ? true : false;\r\n\r\n    // Function to toggle API checkbox\r\n    function toggleAPI () {\r\n        localStorage.checked = localStorage.checked === \"true\" ? false : true;\r\n    }\r\n\r\n    // Function to toggle params checkbox\r\n    function toggleParams (type) {\r\n        switch (type) {\r\n            case 'speed': localStorage.speed = localStorage.speed === \"true\" ? false : true;\r\n                break;\r\n            case 'location': localStorage.location = localStorage.location === \"true\" ? false : true;\r\n                break;\r\n            case 'frequency': localStorage.frequency = localStorage.frequency === \"true\" ? false : true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Function to send data to API\r\n    function sendData () {\r\n        if (isChecked) {\r\n            // Read data from log files\r\n            const speed = fs.readFileSync('./logs/api_logs/NetSpeedLog.txt', 'utf8');\r\n            const frequency = fs.readFileSync('./logs/api_logs/PingLog.txt', 'utf8');\r\n            const location = fs.readFileSync('./logs/api_logs/testServerLocationLog.txt', 'utf8');\r\n\r\n            fetch('http://127.0.0.1:3000/api/users', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id: $settings.id,\r\n                    speed: isSpeed && speed.trim() ? speed : null,\r\n                    frequency: isFrequency && frequency.trim() ? frequency : null,\r\n                    location: isLocation && location.trim() ? location : null\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => console.log(data.data));\r\n        }\r\n    }\r\n\r\n    // Call the function every 10 seconds\r\n    setInterval(sendData, 60000);\r\n</script>\r\n\r\n<Page _currPage=\"API\">\r\n    <div class=\"p-6\">\r\n        <div class=\"flex flex-row justify-between items-center\">\r\n            <h1\r\n                class=\"text-xl mt-4\"\r\n                style=\"color: {$settings.fontColor2}\"\r\n            >\r\n                Allow Neuron to collect system related information such as network speed, location and frequency\r\n            </h1>\r\n            <label\r\n                for=\"toggle-api\"\r\n                class=\"switch ml-4 mt-6\"\r\n            >\r\n                <input\r\n                    type=\"checkbox\"\r\n                    bind:checked={isChecked}\r\n                    on:click={toggleAPI}\r\n                    id=\"toggle-api\"\r\n                >\r\n                <span class=\"slider round\" />\r\n            </label>\r\n        </div>\r\n        <div class=\"text-white p-2 my-8 rounded-md bg-green-500 border-4 border-green-700 \">\r\n            Note : This information is only being collected as part of a public API for developers.\r\n            This data will only be used for building third-party applications, provide better services\r\n            by Internet Service Providers etc.\r\n        </div>\r\n        {#if isChecked}\r\n        <div style=\"color: {$settings.fontColor2};\">\r\n            <h3 class=\"text-xl mb-2\">\r\n                Data to be sent to the API\r\n            </h3>\r\n            <table class=\"table-auto text-md\">\r\n                <tr>\r\n                    <td class=\"py-2 pr-16\" style=\"color: {$settings.fontColor2}\">Network Speed</td>\r\n                    <td>\r\n                        <label \r\n                        for=\"toggle-speed\"\r\n                        class=\"switch ml-4\"\r\n                        >\r\n                        <input \r\n                        type=\"checkbox\"\r\n                        bind:checked={isSpeed}\r\n                        on:click={() => toggleParams('speed')}\r\n                        id=\"toggle-speed\"\r\n                        >\r\n                        <span class=\"slider round\" />\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"py-2 pr-16\" style=\"color: {$settings.fontColor2}\">Your Location</td>\r\n                    <td>\r\n                        <label \r\n                        for=\"toggle-location\"\r\n                        class=\"switch ml-4\"\r\n                        >\r\n                        <input \r\n                        type=\"checkbox\"\r\n                        bind:checked={isLocation}\r\n                        on:click={() => toggleParams('location')}\r\n                        id=\"toggle-location\"\r\n                        >\r\n                        <span class=\"slider round\" />\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td class=\"py-2 pr-16\" style=\"color: {$settings.fontColor2}\">Signal Frequency</td>\r\n                    <td>\r\n                        <label \r\n                        for=\"toggle-frequency\"\r\n                        class=\"switch ml-4\"\r\n                        >\r\n                        <input \r\n                        type=\"checkbox\"\r\n                        bind:checked={isFrequency}\r\n                        on:click={() => toggleParams('frequency')}\r\n                        id=\"toggle-frequency\"\r\n                        >\r\n                        <span class=\"slider round\" />\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        {/if}\r\n    </div>\r\n</Page>\r\n\r\n<style>\r\n    /* The switch - the box around the slider */\r\n.switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 50px;\r\n  min-width: 50px;\r\n  height: 24px;\r\n}\r\n\r\n/* Hide default HTML checkbox */\r\n.switch input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n/* The slider */\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: \"\";\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 4px;\r\n  bottom: 4px;\r\n  background-color: white;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: rgb(147 51 234);\r\n}\r\n\r\ninput:focus + .slider {\r\n  box-shadow: 0 0 1px rgb(147 51 234);\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  -webkit-transform: translateX(26px);\r\n  -ms-transform: translateX(26px);\r\n  transform: translateX(26px);\r\n}\r\n\r\n/* Rounded sliders */\r\n.slider.round {\r\n  border-radius: 34px;\r\n}\r\n\r\n.slider.round:before {\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n","<script>\r\n    //Svelte\r\n    import Page from './_page.svelte';\r\n    import { settings } from '../Stores/settingsStore';\r\n\r\n    let username = $settings.username;\r\n    let bgColor1 = $settings.bgColor1;\r\n    let bgColor2 = $settings.bgColor2;\r\n    let bgColor3 = $settings.bgColor3;\r\n    let bgColor4 = $settings.bgColor4;\r\n    let fontColor1 = $settings.fontColor1;\r\n    let fontColor2 = $settings.fontColor2;\r\n    let font = $settings.font;\r\n\r\n    const applyChanges = type => {\r\n        // Set store values\r\n        $settings.username = type == 'save' ? document.getElementById('username').value : 'Neuron';\r\n        $settings.bgColor1 = type == 'save' ? document.getElementById('bgColor-1').value : '#1F2937';\r\n        $settings.bgColor2 = type == 'save' ? document.getElementById('bgColor-2').value : '#111827';\r\n        $settings.bgColor3 = type == 'save' ? document.getElementById('bgColor-3').value : '#374151';\r\n        $settings.bgColor4 = type == 'save' ? document.getElementById('bgColor-4').value : '#a855f7';\r\n        $settings.fontColor1 = type == 'save' ? document.getElementById('fontColor-1').value : '#ffffff';\r\n        $settings.fontColor2 = type == 'save' ? document.getElementById('fontColor-2').value : '#f0f0f0';\r\n        // $settings.linkColor = type == 'save' ? document.getElementById('linkColor').value: '#374151',\r\n        // $settings.miscColor = type == 'save' ? document.getElementById('miscColor').value: '#8B5CF6',\r\n        $settings.font = type == 'save' ? document.getElementById('font').value : '';\r\n\r\n        // Set localStorage values\r\n        localStorage.username = $settings.username;\r\n        localStorage.bgColor1 = $settings.bgColor1;\r\n        localStorage.bgColor2 = $settings.bgColor2;\r\n        localStorage.bgColor3 = $settings.bgColor3;\r\n        localStorage.bgColor4 = $settings.bgColor4;\r\n        localStorage.fontColor1 = $settings.fontColor1;\r\n        localStorage.fontColor2 = $settings.fontColor2;\r\n        localStorage.font = $settings.font;\r\n\r\n        // Set state variable values\r\n        username = $settings.username;\r\n        bgColor1 = $settings.bgColor1;\r\n        bgColor2 = $settings.bgColor2;\r\n        bgColor3 = $settings.bgColor3;\r\n        bgColor4 = $settings.bgColor4;\r\n        fontColor1 = $settings.fontColor1;\r\n        fontColor2 = $settings.fontColor2;\r\n        font = $settings.font;\r\n    };\r\n</script>\r\n\r\n<Page _currPage=\"Settings\">\r\n<div class=\"mt-4 p-6\">\r\n    <div\r\n    class=\"flex flex-col items-start justify-center rounded-md \"\r\n\r\n    >\r\n    <h1\r\n    class=\"text-xl mb-10\"\r\n    style=\"color: {$settings.fontColor2}\"\r\n    >\r\n        Change the application fonts and tweak the theme to get a custom look and feel\r\n    </h1>\r\n      <!-- <h2\r\n          class=\"text-3xl mb-8 mt-4 font-bold\"\r\n          style=\"color: {$settings.fontColor2};\"\r\n      >\r\n      </h2> -->\r\n      <!-- Username -->\r\n      <div class=\"flex flex-col items-start justify-start mb-6\">\r\n          <label\r\n              class=\"font-semibold pb-2 text-center\"\r\n              style=\"color: {$settings.fontColor2};\"\r\n              for=\"username\"\r\n          >\r\n              Dashboard Username\r\n          </label>\r\n          <input\r\n              class=\"w-96 rounded-md p-1 text-gray-800\"\r\n              value={username}\r\n              type=\"text\"\r\n              id=\"username\"\r\n          />\r\n      </div>\r\n      <!-- Background Colors -->\r\n      <div class=\"flex flex-col items-start justify-center mb-6\">\r\n          <label\r\n              class=\"font-semibold text-center pb-2\"\r\n              style=\"color: {$settings.fontColor2};\"\r\n              for=\"Background Colors\"\r\n          >\r\n                 Background Colors\r\n          </label>\r\n          <div>\r\n              <input\r\n                  class=\"mr-3 rounded-sm\"\r\n                  value={bgColor1}\r\n                  type=\"color\"\r\n                  id=\"bgColor-1\"\r\n              />\r\n              <input\r\n                  class=\"mx-3 rounded-sm\"\r\n                  value={bgColor2}\r\n                  type=\"color\"\r\n                  id=\"bgColor-2\"\r\n              />\r\n              <input\r\n                  class=\"mx-3 rounded-sm\"\r\n                  value={bgColor3}\r\n                  type=\"color\"\r\n                  id=\"bgColor-3\"\r\n              />\r\n              <input\r\n                  class=\"mx-3 rounded-sm\"\r\n                  value={bgColor4}\r\n                  type=\"color\"\r\n                  id=\"bgColor-4\"\r\n              />\r\n          </div>\r\n      </div>\r\n      <!-- Font Colors -->\r\n      <div class=\"flex flex-col items-start justify-center mb-6\">\r\n          <label\r\n              class=\"font-semibold text-center pb-2\"\r\n              style=\"color: {$settings.fontColor2};\"\r\n              for=\"Font Colors\"\r\n          >\r\n              Font Colors\r\n          </label>\r\n          <div>\r\n              <input\r\n                  class=\"mr-3 rounded-sm\"\r\n                  value={fontColor1}\r\n                  type=\"color\"\r\n                  id=\"fontColor-1\"\r\n              />\r\n              <input\r\n                  class=\"mx-3 rounded-sm\"\r\n                  value={fontColor2}\r\n                  type=\"color\"\r\n                  id=\"fontColor-2\"\r\n              />\r\n          </div>\r\n      </div>\r\n      <!-- Font -->\r\n      <div class=\"flex flex-col items-start justify-center mb-6\">\r\n          <label\r\n              class=\"font-semibold pb-2 text-center pb-2\"\r\n              style=\"color: {$settings.fontColor2};\"\r\n              for=\"font\"\r\n          >\r\n              Font Style\r\n          </label>\r\n          <select\r\n              value={font}\r\n              name=\"font\"\r\n              id=\"font\"\r\n              class=\"w-max mb-4 px-2 py-1 rounded-md text-gray-800\"\r\n          >\r\n              <option value=\"\">\r\n                  Default\r\n              </option>\r\n              <option value=\"Roboto\">\r\n                  Roboto\r\n              </option>\r\n              <option value=\"Open Sans\">\r\n                  Open Sans\r\n              </option>\r\n              <option value=\"Lato\">\r\n                  Lato\r\n              </option>\r\n              <option value=\"Montserrat\">\r\n                  Montserrat\r\n              </option>\r\n          </select>\r\n      </div>\r\n      <!-- Buttons -->\r\n      <div class=\"flex flex-row items-start justify-center items-center\">\r\n          <button\r\n              class=\"text-sm bg-purple-500 p-8 py-1 my-2 rounded-md mr-1 font-semibold hover:bg-purple-600\"\r\n              style=\"color: {$settings.fontColor1};\"\r\n              on:click={() => applyChanges('save')}\r\n          >\r\n              Apply\r\n          </button>\r\n          <button\r\n              class=\"text-sm bg-purple-500 px-8 py-1 m-2 rounded-md mx-1 font-semibold hover:bg-purple-600\"\r\n              style=\"color: {$settings.fontColor1};\"\r\n              on:click={() => applyChanges('reset')}\r\n          >\r\n              Reset\r\n          </button>\r\n      </div>\r\n  </div>\r\n\r\n</div>\r\n</Page>\r\n\r\n<style>\r\n    input[type=color]\r\n    {\r\n\t    width: 24px;\r\n\t    height: 24px;\r\n\t    border: none;\r\n\t    border-radius: 9999px;\r\n\t    background: none;\r\n        border-color: #f0f0f0;\r\n    }\r\n\r\n    input[type=\"color\"]::-webkit-color-swatch-wrapper {\r\n\t    padding: 0;\r\n    }\r\n    input[type=\"color\"]::-webkit-color-swatch {\r\n\t    border: solid 1px #000; /*change color of the swatch border here*/\r\n\t    border-radius: 9999px;\r\n        border-color: #333;\r\n    }\r\n</style>\r\n","<script>\r\n\t// Page components for the different pages\r\n\timport Router from 'svelte-spa-router';\r\n\timport Main from './Pages/_main.svelte';\r\n\timport Network from './Pages/_network.svelte';\r\n\timport Diagnostics from './Pages/_diagnostics.svelte';\r\n\timport System from './Pages/_system.svelte';\r\n\timport Api from './Pages/_api.svelte';\r\n\timport Settings from './Pages/_settings.svelte';\r\n\r\n</script>\r\n\r\n<Router routes={{\r\n\t'/': Main,\r\n\t'/network': Network,\r\n\t'/diagnostics': Diagnostics,\r\n\t'/system': System,\r\n\t'/api': Api,\r\n\t'/settings': Settings\r\n}} />","//Svelte\r\nimport App from './App.svelte';\r\n\r\nconst app = new App({\r\n\ttarget: document.body\r\n});\r\n\r\nexport default app;\r\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","slice","get_slot_changes","dirty","lets","merged","len","Math","max","length","i","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","set_style","key","important","style","setProperty","current_component","set_current_component","get_current_component","Error","onMount","on_mount","onDestroy","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","call","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","flushing","seen_callbacks","Set","update","pop","has","add","clear","fragment","before_update","p","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","get_spread_update","levels","updates","to_null_out","accounted_for","n","undefined","get_spread_object","spread_props","create_component","mount_component","m","new_on_destroy","map","filter","destroy_component","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","ready","rest","fill","make_dirty","hydrate","l","Array","from","childNodes","children","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","subscriber_queue","readable","start","writable","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","derived","stores","initial_value","single","isArray","stores_array","auto","inited","values","pending","cleanup","sync","result","unsubscribers","getLocation","hashPosition","window","location","href","substr","qsPosition","querystring","loc","params","$loc","routes","prefix","restoreScrollState","RouteItem","path","_sveltesparouter","charAt","RegExp","pattern","keys","str","loose","tmp","ext","arr","split","shift","substring","parse","conditions","userData","_pattern","_keys","startsWith","match","matches","exec","out","decodeURIComponent","routesList","route","componentParams","dispatch","dispatchNextTick","previousScrollState","popStateChanged","state","__svelte_spa_router_scrollY","scrollTo","__svelte_spa_router_scrollX","lastLoc","componentObj","unsubscribeLoc","newLoc","checkConditions","obj","loading","loadingParams","loaded","default","history","scrollRestoration","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","validate","uuid","REGEX","test","byteToHex","toString","settings","username","localStorage","id","buf","offset","rnds","random","arguments","toLowerCase","TypeError","stringify","uuidv4","bgColor1","bgColor2","bgColor3","bgColor4","fontColor1","fontColor2","fontColor3","fontColor4","shellColor","linkColor","miscColor","font","link","icon","remote","require","getCurrentWindow","currPage","minimize","maximize","close","_currPage","checkInStorage","strToArr","favorites","some","item","title","tooltip","srcElement","classList","newFavorites","toggleFavourites","proto","localip","foriegnip","ipcRenderer","netstat","send","on","netstatInfo","console","log","fs","fName","Date","fileStamp","getDay","getMonth","getFullYear","Markers","INFO","WARN","freeze","Header","MSG","ERR","logToText","content","currMark","timeStamp","hours","getHours","minutes","getMinutes","seconds","getSeconds","mark","quiet","stream","createWriteStream","flags","write","end","logSimple","wstream","err","downloadSpeed","totalTime","networkSpeed","started","speedInfo","client","isp","server","city","password","strength","strengthColor","lengthColor","specialCharacters","includes","daysRemaining","validFrom","validTo","ssl","host","sslInfo","address","ns","mx","dns","dnsInfo","country","geo","ip","geoInfo","iface","ip4","interfaces","pIp","networkInfo","ipInfo","hst","time","alive","loss","ping","pingInterval","pingChart","timeList","isChartVisible","logged","packetCount","getElementById","getContext","destroy","Chart","maintainAspectRatio","color","$settings","scales","x","ticks","y","labels","datasets","label","borderColor","backgroundColor","tension","clearInterval","setInterval","pInfo","port","search","portInfo","brand","speed","cores","socket","cpu","cpuInfo","disk","diskChart","dInfo","animation","duration","total","pow","free","hoverOffset","borderWidth","model","vendor","bus","vram","connection","display","refresh","resx","resy","graphics","graphicsInfo","platform","hostname","kernel","arch","os","osInfo","ram","ramChart","ramInfo","cutout","Number","String","used","use","useChart","chartInterval","usageInfo","curr","ssid","bssid","frequency","security","channel","info","wifiInfo","displayInfo","wifi","mac","deviceInfo","Ping","IpTools","NetworkInterfaces","LocalDevices","Dns","Ports","Netstat","SslChecker","Info","PasswordStrength","NetworkSpeed","Cpu","OSinfo","Ram","Graphics","Disk","Usage","base","mask","bitmask","hostmask","broadcast","size","first","last","netmask","rx","rxd","rxe","tx","txd","txe","nx","nxInfo","proc","procInfo","toggleAPI","checked","toggleParams","isChecked","isSpeed","isLocation","isFrequency","sendData","readFileSync","fetch","method","headers","Content-Type","body","JSON","trim","res","json","applyChanges","/","Main","/network","Network","/diagnostics","Diagnostics","/system","System","/api","Api","/settings","Settings"],"mappings":"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"}